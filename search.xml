<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>STL总结</title>
    <url>/2020/05/18/STL%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>C++ 的标准模板库（Standard Template Library，STL）是泛型程序设计最成功应用的实例。STL 是一些常用数据结构（如链表、可变长数组、排序二叉树）和算法（如排序、查找）的模板的集合，主要由 Alex Stepanov 主持开发，于 1998 年被加入 C++ 标准。</p>
</blockquote>
<h2 id="c-容器"><a href="#c-容器" class="headerlink" title="c++容器"></a>c++容器</h2><blockquote>
<p>容器（container）用于存放数据的类模板。可变长数组、链表、平衡二叉树等数据结构在 STL 中都被实现为容器.</p>
</blockquote>
<a id="more"></a>
<h3 id="顺序容器"><a href="#顺序容器" class="headerlink" title="顺序容器"></a>顺序容器</h3><blockquote>
<p>元素在容器中的位置同元素的值无关，即容器不是排序的。将元素插入容器时，指定在什么位置（尾部、头部或中间某处）插入，元素就会位于什么位置。</p>
</blockquote>
<p>主要包括：可变长动态数组vector，双端队列 deque、双向链表 list。</p>
<h3 id="关联容器"><a href="#关联容器" class="headerlink" title="关联容器"></a>关联容器</h3><blockquote>
<p>关联容器内的元素是排序的。插入元素时，容器会按一定的排序规则将元素放到适当的位置上，因此插入元素时不能指定位置。</p>
</blockquote>
<p>主要包括：set、multiset、map、multimap。</p>
<h3 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h3><blockquote>
<p>STL在两类容器的基础上屏蔽一部分功能，突出或增加另一部分功能，实现了三种容器适配器：栈(stack)队列(queue)、优先级队列 (priority_queue)。<br><br></p>
</blockquote>
<h2 id="通用操作"><a href="#通用操作" class="headerlink" title="通用操作"></a>通用操作</h2><h3 id="容器函数"><a href="#容器函数" class="headerlink" title="容器函数"></a>容器函数</h3><blockquote>
<p>所有容器都可以使用的成员函数</p>
</blockquote>
<ul>
<li>int size()：返回容器对象中元素的个数。</li>
<li>bool empty()：判断容器对象是否为空。</li>
</ul>
<h3 id="顺序容器和关联容器共有成员函数"><a href="#顺序容器和关联容器共有成员函数" class="headerlink" title="顺序容器和关联容器共有成员函数"></a>顺序容器和关联容器共有成员函数</h3><ul>
<li>begin()：返回指向容器中第一个元素的迭代器。</li>
<li>end()：返回指向容器中最后一个元素后面的位置的迭代器。</li>
<li>rbegin()：返回指向容器中最后一个元素的反向迭代器。</li>
<li>rend()：返回指向容器中第一个元素前面的位置的反向迭代器。</li>
<li>erase(…)：从容器中删除一个或几个元素。</li>
<li>clear()：从容器中删除所有元素。</li>
</ul>
<h3 id="顺序容器专享成员函数"><a href="#顺序容器专享成员函数" class="headerlink" title="顺序容器专享成员函数"></a>顺序容器专享成员函数</h3><ul>
<li>front()：返回容器中第一个元素的引用。</li>
<li>back()：返回容器中最后一个元素的引用。</li>
<li>push_back()：在容器末尾增加新元素。</li>
<li>pop_back()：删除容器末尾的元素。</li>
<li>insert(…)：插入一个或多个元素。</li>
</ul>
<h2 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h2><blockquote>
<p>迭代器是一个变量，相当于容器和操纵容器的算法之间的中介。迭代器可以指向容器中的某个元素，通过迭代器就可以读写它指向的元素。从这一点上看，迭代器和指针类似。</p>
</blockquote>
<h3 id="迭代器定义方式"><a href="#迭代器定义方式" class="headerlink" title="迭代器定义方式"></a>迭代器定义方式</h3><ol>
<li>正向迭代器</li>
</ol>
<blockquote>
<p>容器类名::iterator  迭代器名;<br>example:vector<int>::iteartor i;</p>
</blockquote>
<ol start="2">
<li><p>常量正向迭代器</p>
<blockquote>
<p>容器类名::const_iterator  迭代器名;</p>
</blockquote>
</li>
<li><p>反向迭代器</p>
<blockquote>
<p>容器类名::reverse_iterator  迭代器名;</p>
</blockquote>
</li>
<li><p>常量反向迭代器</p>
<blockquote>
<p>容器类名::const_reverse_iterator  迭代器名;</p>
</blockquote>
</li>
</ol>
<p>###迭代器用法示例</p>
<blockquote>
<p>迭代器都可以进行++操作</p>
<blockquote>
<p>对正向迭代器进行++操作时，迭代器会指向容器中的后一个元素。<br>而对反向迭代器进行++操作时，迭代器会指向容器中的前一个元素。</p>
</blockquote>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;  <span class="comment">//v是存放int类型变量的可变长数组,初始为空</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">0</span>; n&lt;<span class="number">5</span>; ++n)</span><br><span class="line">        v.push_back(n);  <span class="comment">//push_back成员函数在vector容器尾部添加一个元素</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator i;  <span class="comment">//定义正向迭代器</span></span><br><span class="line">    <span class="keyword">for</span> (i = v.begin(); i != v.end(); ++i) &#123;  <span class="comment">//用迭代器遍历容器</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *i &lt;&lt; <span class="string">" "</span>;  <span class="comment">//*i 就是迭代器i指向的元素</span></span><br><span class="line">        *i += <span class="number">2</span>;  <span class="comment">//每个元素变为原来的2倍</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//用反向迭代器遍历容器</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::reverse_iterator j = v.rbegin(); j != v.rend(); ++j)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *j &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>0 1 2 3 4<br>6 5 4 3 2</p>
<div class="note warning">
            <ol><li>注意定义为常量迭代器时第12行’*i+=2;’是会报错的，迭代器的值不能更改。</li><li>容器适配器 stack、queue 和 priority_queue 没有迭代器。</li></ol>
          </div>
<p>###迭代器功能分类</p>
<div class="note success">
            <p>不同容器的迭代器，其功能强度是不同的</p>
          </div>
<ol>
<li>正向迭代器<br> 迭代器p是正向迭代器，则支持++p,p++,*p,==,!=</li>
<li>双向迭代器(list,set/multiset,map/multimap)<br> 包含正向迭代器的所有功能，还支持–p，p–</li>
<li>随机访问迭代器(vector,deque)<br> 包含前者功能，还支持随机访问<ul>
<li>p+=i：使得 p 往后移动 i 个元素。</li>
<li>p-=i：使得 p 往前移动 i 个元素。</li>
<li>p+i：返回 p 后面第 i 个元素的迭代器。</li>
<li>p-i：返回 p 前面第 i 个元素的迭代器。</li>
<li>p[i]：返回 p 后面第 i 个元素的引用。</li>
</ul>
</li>
</ol>
<div class="note info">
            <ol><li>两个随机访问迭代器 p1、p2 还可以用 &lt;、&gt;、&lt;=、&gt;= 运算符进行比较。p1&lt;p2的含义是：p1 经过若干次（至少一次）++操作后，就会等于 p2。其他比较方式的含义与此类似。</li><li>对于两个随机访问迭代器 p1、p2，表达式p2-p1也是有定义的，其返回值是 p2 所指向元素和 p1 所指向元素的序号之差（也可以说是 p2 和 p1 之间的元素个数减一）</li></ol>
          </div>

<p>示例代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">100</span>)</span></span>; <span class="comment">//v被初始化成有100个元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; v.size() ; ++i) <span class="comment">//size返回元素个数</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; v[i]; <span class="comment">//像普通数组一样使用vector容器</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator i;</span><br><span class="line">    <span class="keyword">for</span>(i = v.begin(); i != v.end (); ++i) <span class="comment">//用 != 比较两个迭代器</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; * i;</span><br><span class="line">    <span class="keyword">for</span>(i = v.begin(); i &lt; v.end ();++i) <span class="comment">//用 &lt; 比较两个迭代器</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; * i;</span><br><span class="line">    i = v.begin();</span><br><span class="line">    <span class="keyword">while</span>(i &lt; v.end()) &#123; <span class="comment">//间隔一个输出</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; * i;</span><br><span class="line">        i += <span class="number">2</span>; <span class="comment">// 随机访问迭代器支持 "+= 整数"  的操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="迭代器辅助函数"><a href="#迭代器辅助函数" class="headerlink" title="迭代器辅助函数"></a>迭代器辅助函数</h3><ol>
<li>advance(p, n)：使迭代器 p 向前或向后移动 n 个元素。</li>
<li>distance(p, q)：计算两个迭代器之间的距离，即迭代器 p 经过多少次 + + 操作后和迭代器 q 相等。如果调用时 p 已经指向 q 的后面，则这个函数会陷入死循环。</li>
<li>iter_swap(p, q)：用于交换两个迭代器 p、q 指向的值。<br>使用时需要引入algorithm库</li>
<li>next(iterator i):指向i的下一个迭代器</li>
<li>prev(i):指向i的前一个迭代器</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt; //要使用操作迭代器的函数模板，需要包含此文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="built_in">list</span> &lt;<span class="keyword">int</span>&gt; lst(a, a+<span class="number">5</span>);</span><br><span class="line">    <span class="built_in">list</span> &lt;<span class="keyword">int</span>&gt;::iterator p = lst.begin();</span><br><span class="line">    advance(p, <span class="number">1</span>);  <span class="comment">//p向后移动1个元素，指向2</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1)"</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出 1)2</span></span><br><span class="line">    advance(p, <span class="number">-1</span>);  <span class="comment">//p向前移动一个元素，指向1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2)"</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出 2)1</span></span><br><span class="line">    <span class="built_in">list</span>&lt;<span class="keyword">int</span>&gt;::iterator q = lst.end();</span><br><span class="line">    q--;  <span class="comment">//q 指向 5</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3)"</span> &lt;&lt; distance(p, q) &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出 3)4</span></span><br><span class="line">    iter_swap(p, q); <span class="comment">//交换 1 和 5</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"4)"</span>;</span><br><span class="line">    <span class="keyword">for</span> (p = lst.begin(); p != lst.end(); ++p)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="STL算法："><a href="#STL算法：" class="headerlink" title="STL算法："></a>STL算法：</h2><ol>
<li>copy：将一个容器的内容复制到另一个容器。</li>
<li>remove：在容器中删除一个元素。</li>
<li>random_shuffle：随机打乱容器中的元素。</li>
<li>fill：用某个值填充容器。</li>
<li>find：在容器中查找元素。</li>
<li>count_if：统计容器中符合某种条件的元素的个数。</li>
<li>sort:排序</li>
</ol>
<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><blockquote>
<p>顺序容器，支持STL中的所有算法，使用vector，需要包含vector头文件<br>随机访问元素的开销是常数，尾部添加元素的消耗时间也是常数，中间插入和删除涉及到元素的移动，消耗时间与元素个数有关<br>vector采用动态分配数组来存储元素，默认大小是32个元素存储空间，超过这个数时，需要把之前的元素复制到另外开辟的空间上，此时添加元素的时间开销不是常数。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">成员函数</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">vector()</td>
<td align="left">无参构造函数，将容器初始化为空</td>
</tr>
<tr>
<td align="center">vector(int n)</td>
<td align="left">将容器初始化为有 n 个元素</td>
</tr>
<tr>
<td align="center">vector(int n, const T &amp; val)</td>
<td align="left">假定元素的类型是 T，此构造函数将容器初始化为有 n 个元素，每 个元素的值都是 val</td>
</tr>
<tr>
<td align="center">vector(iterator first, iterator last)</td>
<td align="left">first 和 last 可以是其他容器的迭代器。一般来说，本构造函数初始化的结果就是将 vector 容器的内容变成与其他容器上的区间 [first, last) —致</td>
</tr>
<tr>
<td align="center">void clear()</td>
<td align="left">删除所有元素</td>
</tr>
<tr>
<td align="center">bool empty()</td>
<td align="left">判断容器是否为空</td>
</tr>
<tr>
<td align="center">void pop_back()</td>
<td align="left">删除容器末尾的元素</td>
</tr>
<tr>
<td align="center">void push_back( const T &amp; val)</td>
<td align="left">将 val 添加到容器末尾</td>
</tr>
<tr>
<td align="center">int size()</td>
<td align="left">返回容器中元素的个数</td>
</tr>
<tr>
<td align="center">T &amp; front()</td>
<td align="left">返回容器中第一个元素的引用</td>
</tr>
<tr>
<td align="center">T &amp; back()</td>
<td align="left">返回容器中最后一个元素的引用</td>
</tr>
<tr>
<td align="center">iterator insert(iterator i, const T &amp; val)</td>
<td align="left">将 val 插入迭代器 i 指向的位置，返回 i</td>
</tr>
<tr>
<td align="center">iterator insert( iterator i, iterator first, iterator last)</td>
<td align="left">将其他容器上的区间 [first, last) 中的元素插入迭代器 i 指向的位置</td>
</tr>
<tr>
<td align="center">iterator erase(iterator i)</td>
<td align="left">删除迭代器 i 指向的元素，返回值是被删元素后面的元素的迭代器</td>
</tr>
<tr>
<td align="center">iterator erase(iterator first, iterator last)</td>
<td align="left">删除容器中的区间 [first, last)</td>
</tr>
<tr>
<td align="center">void swap( vector <T> &amp; v)</td>
<td align="left">将容器自身的内容和另一个同类型的容器 v 互换</td>
</tr>
</tbody></table>
<h2 id="list"><a href="#list" class="headerlink" title="list"></a>list</h2><blockquote>
<p>顺序容器，双向链表<br>使用时需要引入list库文件<br>定位到元素位置之后，增删元素时间为常数<br>|成员函数|解释|<br>|:—:|:—|<br>|void push_front(const T &amp; val)|将 val 插入链表最前面|<br>|void pop_front()|删除链表最前面的元素|<br>|void sort()|将链表从小到大排序|<br>|void remove (const T &amp; val)|删除和 val 相等的元素|<br>|remove_if|删除符合某种条件的元素|<br>|void unique()|删除所有和前一个元素相等的元素|<br>|void merge(list <T> &amp; x)|将链表 x 合并进来并清空 x。要求链表自身和 x 都是有序的|<br>|void splice(iterator i, list <T> &amp; x, iterator first, iterator last)|在位置 i 前面插入链表 x 中的区间 [first, last)，并在链表 x 中删除该区间。链表自身和链表 x 可以是同一个链表，只要 i 不在 [first, last) 中即可|</p>
</blockquote>
<blockquote>
<p>STL 中的算法 sort 可以用来对 vector 和 deque 排序，它需要随机访问迭代器的支持。因为 list 不支持随机访问迭代器，所以不能用算法 sort 对 list 容器排序。因此，list 容器引入了 sort 成员函数以完成排序。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;  //使用 list 需要包含此头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;  //使用STL中的算法需要包含此头文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>: <span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> n_) &#123; n = n_; &#125;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> A &amp; a1, <span class="keyword">const</span> A &amp; a2);</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> A &amp; a1, <span class="keyword">const</span> A &amp; a2);</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp; o, <span class="keyword">const</span> A &amp; a);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> A &amp; a1, <span class="keyword">const</span> A &amp; a2) &#123;</span><br><span class="line">    <span class="keyword">return</span> a1.n &lt; a2.n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> A &amp; a1, <span class="keyword">const</span> A &amp; a2) &#123;</span><br><span class="line">    <span class="keyword">return</span> a1.n == a2.n;</span><br><span class="line">&#125;</span><br><span class="line">ostream &amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp; o, <span class="keyword">const</span> A &amp; a) &#123;</span><br><span class="line">    o &lt;&lt; a.n;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Print</span>(<span class="title">T</span> <span class="title">first</span>, <span class="title">T</span> <span class="title">last</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">for</span> (; first != last; ++first)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *first &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    A a[<span class="number">5</span>] = &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    A b[<span class="number">7</span>] = &#123; <span class="number">10</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">40</span> &#125;;</span><br><span class="line">    list&lt;A&gt; lst1(a, a + 5), lst2(b, b + 7);</span><br><span class="line">    lst1.sort();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"1)"</span>; Print(lst1.begin(), lst1.end());  <span class="comment">//输出：1)1 2 2 3 4</span></span><br><span class="line">    lst1.remove(<span class="number">2</span>);  <span class="comment">//删除所有和A(2)相等的元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"2)"</span>; Print(lst1.begin(), lst1.end());  <span class="comment">//输出：2)1 3 4</span></span><br><span class="line">    lst2.pop_front();  <span class="comment">//删除第一个元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"3)"</span>; Print(lst2.begin(), lst2.end());  <span class="comment">//输出：3)30 20 30 30 40 40</span></span><br><span class="line">    lst2.unique();  <span class="comment">//删除所有和前一个元素相等的元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"4)"</span>; Print(lst2.begin(), lst2.end());  <span class="comment">//输出：4)30 20 30 40</span></span><br><span class="line">    lst2.sort();</span><br><span class="line">    lst1.merge(lst2);  <span class="comment">//合并 lst2 到 lst1 并清空 lst2</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"5)"</span>; Print(lst1.begin(), lst1.end());  <span class="comment">//输出：5)1 3 4 20 30 30 40</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"6)"</span>; Print(lst2.begin(), lst2.end());  <span class="comment">//lst2是空的，输出：6)</span></span><br><span class="line">    lst1.reverse();  <span class="comment">//将 lst1 前后颠倒</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"7)"</span>; Print(lst1.begin(), lst1.end());  <span class="comment">//输出 7)40 30 30 20 4 3 1</span></span><br><span class="line">    lst2.insert(lst2.begin(), a + <span class="number">1</span>, a + <span class="number">4</span>);  <span class="comment">//在 lst2 中插入 3,2,4 三个元素</span></span><br><span class="line">    <span class="built_in">list</span> &lt;A&gt;::iterator p1, p2, p3;</span><br><span class="line">    p1 = find(lst1.begin(), lst1.end(), <span class="number">30</span>);</span><br><span class="line">    p2 = find(lst2.begin(), lst2.end(), <span class="number">2</span>);</span><br><span class="line">    p3 = find(lst2.begin(), lst2.end(), <span class="number">4</span>);</span><br><span class="line">    lst1.splice(p1, lst2, p2, p3);  <span class="comment">//将[p2, p3)插入p1之前，并从 lst2 中删除[p2,p3)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"8)"</span>; Print(lst1.begin(), lst1.end());  <span class="comment">//输出：8)40 2 30 30 20 4 3 1</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"9)"</span>; Print(lst2.begin(), lst2.end());  <span class="comment">//输出：9)3 4</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><blockquote>
<p>顺序容器，可变长数组，所以vector的成员函数，deque都有<br>deque 在头尾增删元素都具有较好的性能</p>
</blockquote>
<p>相比于vector多了下面两个成员函数</p>
<div class="note info">
            <p>void push_front (const T &amp; val);  //将 val 插入容器的头部<br>void pop_front();  //删除容器头部的元素</p>
          </div>

<h2 id="关联容器-1"><a href="#关联容器-1" class="headerlink" title="关联容器"></a>关联容器</h2><blockquote>
<p>关联容器内部的元素都是排好序的，有以下四种:<br>set：排好序的集合，不允许有相同元素。<br>multiset：排好序的集合，允许有相同元素。<br>map：每个元素都分为关键字和值两部分，容器中的元素是按关键字排序的。不允许有多个元素的关键字相同。<br>multimap：和 map 类似，差别在于元素的关键字可以相同。</p>
</blockquote>
<p>学前了解：<font color=red>pair模板</font></p>
<div class="note success">
            <p>由于关联容器的一些成员函数的返回值是 pair 对象，而且 map 和 multimap 容器中的元素都是 pair 对象，所以在学习之前，首先认识一下pair对象</p>
          </div>
<p><a href="https://www.cnblogs.com/YangKun-/p/12519094.html" target="_blank" rel="noopener" class="zhihu">pair对象模板简介</a></p>
<h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><blockquote>
<p>set 是关联容器的一种,是排序好的集合(元素已经进行了排序)。set 中不能有重复的元素。</p>
</blockquote>
<div class="note warning">
            <p>不能直接修改set容器中元素的值。因为元素被修改后，容器并不会自动重新调整顺序,于是容器的有序性就会被破坏,再在其上进行查找等操作就会得到错误的结果。因此,如果要修改set容器中某个元素的值,正确的做法是先删除该元素,再插入新元素。</p>
          </div>
<table>
<thead>
<tr>
<th align="center">成员函数</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">iterator find (const T &amp; val);</td>
<td align="left">在容器中查找值为 val 的元素，返回其迭代器。如果找不到，返 回 end()</td>
</tr>
<tr>
<td align="center">pair&lt;iterator, bool&gt; insert(const T &amp; val);</td>
<td align="left">将 val 插入容器中并返回其迭代器和bool对象bool为true表示插入成功</td>
</tr>
<tr>
<td align="center">void insert(iterator first, iterator last);</td>
<td align="left">将区间 [first, last) 中的元素插人容器</td>
</tr>
<tr>
<td align="center">int count( const T &amp; val);</td>
<td align="left">统计有多少个元素的值和 val 相等</td>
</tr>
<tr>
<td align="center">iterator lower_bound( const T &amp; val);</td>
<td align="left">查找一个最大的位置 it，使得 [begin(), it) 中所有的元素者比 val 小</td>
</tr>
<tr>
<td align="center">iterator upper_bound( const T &amp; val);</td>
<td align="left">查找一个最小的位置 it，使得 [it, end()) 中所有的元素都比 val 大</td>
</tr>
<tr>
<td align="center">pair &lt;iterator, iterator &gt; equal_range (const T &amp; val);</td>
<td align="left">同时求得 lower_bound 和 upper_bound</td>
</tr>
<tr>
<td align="center">iterator erase(iterator it);</td>
<td align="left">删除 it 指向的元素，返回其后面的元素的迭代器（Visual Studio 2010 中如此，但是在 C++ 标准和 Dev C++ 中，返回值不是这样）</td>
</tr>
<tr>
<td align="center">iterator erase(iterator first, iterator last);</td>
<td align="left">删除区间 [first, last)，返回 last（Visual Studio 2010 中如此，但是在 C++ 标准和 Dev C++ 中，返回值不是这样）</td>
</tr>
</tbody></table>
<p>使用小测试</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;  //使用set须包含此文件</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">typedef</span> <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator IT;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">5</span>] = &#123; <span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">2</span> &#125;;</span><br><span class="line">    <span class="function"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; <span class="title">st</span><span class="params">(a,a+<span class="number">5</span>)</span></span>;    <span class="comment">// st里是 1 2 3 4 6</span></span><br><span class="line">    pair&lt; IT,<span class="keyword">bool</span>&gt; result;</span><br><span class="line">    result = st.insert(<span class="number">5</span>); <span class="comment">// st变成  1 2 3 4 5 6</span></span><br><span class="line">    <span class="keyword">if</span>(result.second)    <span class="comment">//插入成功则输出被插入元素</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; * result.first  &lt;&lt; <span class="string">" inserted"</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出: 5 inserted</span></span><br><span class="line">    <span class="keyword">if</span>(st.insert(<span class="number">5</span>).second)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; * result.first  &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; * result.first &lt;&lt; <span class="string">" already exists"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//输出 5 already exists</span></span><br><span class="line">    pair&lt;IT,IT&gt; bounds = st.equal_range(<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; * bounds.first &lt;&lt; <span class="string">","</span> &lt;&lt; * bounds.second ;  <span class="comment">//输出：4,5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="multiset"><a href="#multiset" class="headerlink" title="multiset"></a>multiset</h3><div class="note primary">
            <p>multiset 是关联容器的一种，是排序好的集合（元素已经进行了排序），并且允许有相同的元素。它和 et的差别在于set中不能有重复的元素。 set的成员函数 multiset 中都有。</p>
          </div>

<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><blockquote>
<p>map 是关联容器的一种，map 的每个元素都分为关键字和值两部分，容器中的元素是按关键字排序的，并且不允许有多个元素的关键字相同。</p>
</blockquote>
<div class="note warning">
            <p>不能直接修改 map 容器中的关键字。因为 map 中的元素是按照关键字排序的，当关键字被修改后，容器并不会自动重新调整顺序，于是容器的有序性就会被破坏，再在其上进行查找等操作就会得到错误的结果。</p>
          </div>

<p>成员函数和set大同小异，使用方法也类似</p>
<table>
<thead>
<tr>
<th align="center">成员函数</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="center">iterator find( const Key &amp; val);</td>
<td align="left">在容器中查找关键字等于 val 的元素，返回其迭代器；如果找不到，返回 end()</td>
</tr>
<tr>
<td align="center">iterator insert (pair &lt;Key, T&gt; const &amp;p);</td>
<td align="left">将 pair 对象 p 插入容器中并返回其迭代器</td>
</tr>
<tr>
<td align="center">void insert(iterator first, iterator last);</td>
<td align="left">将区间 [first, last) 插入容器</td>
</tr>
<tr>
<td align="center">int count( const Key &amp; val);</td>
<td align="left">统计有多少个元素的关键字和 val 相等</td>
</tr>
<tr>
<td align="center">iterator lower_bound( const Key &amp; val);</td>
<td align="left">查找一个最大的位置 it，使得 [begin( ), it) 中所有的元素的关键字都比 val 小</td>
</tr>
<tr>
<td align="center">iterator upper_bound(const Key &amp; val);</td>
<td align="left">查找一个最小的位置 it，使得 [it, end()) 中所有的元素的关键字都比 val 大</td>
</tr>
<tr>
<td align="center">pair &lt; iterator, iterator &gt; equal_range (const Key &amp; val);</td>
<td align="left">同时求得 lower_bound 和 upper_bound</td>
</tr>
<tr>
<td align="center">iterator erase(iterator it);</td>
<td align="left">删除 it 指向的元素，返回其后面的元素的迭代器（Visual Studio 2010 中如此，但是在 C++ 标准和 Dev C++ 中，返回值不是这样）</td>
</tr>
<tr>
<td align="center">iterator erase(iterator first, iterator last);</td>
<td align="left">删除区间 [first, last)，返回 last（Visual Studio 2010 中如此，但是在 C++ 标准和 Dev C++ 中，返回值不是这样）</td>
</tr>
</tbody></table>
<h3 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h3><div class="note info">
            <p>与map操作基本相同，主要区别时key值允许重复</p>
          </div>

<h2 id="容器适配器-1"><a href="#容器适配器-1" class="headerlink" title="容器适配器"></a>容器适配器</h2><blockquote>
<p>STL 中的容器适配器有 stack、queue、priority_queue 三种。它们都是在顺序容器的基础上实现的，屏蔽了顺序容器的一部分功能，突出或增加了另外一些功能。</p>
</blockquote>
<p>容器适配器都有以下三个成员函数：</p>
<div class="note success">
            <ul><li>push：添加一个元素。</li><li>top：返回顶部（对 stack 而言）或队头（对 queue,priority_queue 而言）的元素的引用。</li><li>pop：删除一个元素。</li></ul>
          </div>

<h3 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h3><blockquote>
<p>stack就是“栈”。栈是一种后进先出的元素序列，访问和删除都只能对栈顶的元素（即最后一个被加入栈的元素）进行，并且元素也只能被添加到栈顶。栈内的元素不能访问。如果一定要访问栈内的元素，只能将其上方的元素全部从栈中删除，使之变成栈顶元素才可以。</p>
</blockquote>
<div class="note primary">
            <p>使用时包含stack头文件<br>在默认情况下，stack 就是用 deque 实现的。当然，也可以指定用 vector 或 list 实现。</p>
          </div>

<table>
<thead>
<tr>
<th align="left">成员函数</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">void pop();</td>
<td align="left">弹出（即删除）栈顶元素</td>
</tr>
<tr>
<td align="left">T &amp; top();</td>
<td align="left">返回栈顶元素的引用。通过此函数可以读取栈顶元素的值，也可以修改栈顶元素</td>
</tr>
<tr>
<td align="left">void push (const T &amp; x);</td>
<td align="left">将 x 压入栈顶</td>
</tr>
</tbody></table>
<h3 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h3><blockquote>
<p>queue 就是“队列”。队列是先进先出的，和排队类似。队头的访问和删除操作只能在队头进行，添加操作只能在队尾进行。不能访问队列中间的元素。</p>
</blockquote>
<div class="note primary">
            <p>使用时包含queue头文件<br>queue 可以用 list 和 deque 实现，默认情况下用 deque 实现。<br>queue 同样也有和 stack 类似的 push、pop、top 函数。区别在于，queue 的 push 发生在队尾，pop 和 top 发生在队头。    </p>
          </div>

<h3 id="priority-queue"><a href="#priority-queue" class="headerlink" title="priority_queue"></a>priority_queue</h3><blockquote>
<p>priority_queue 是“优先队列”。它和普通队列的区别在于，优先队列的队头元素总是最大的——即执行 pop 操作时，删除的总是最大的元素；执行 top 操作时，返回的是最大元素的引用。</p>
</blockquote>
<div class="note primary">
            <ul><li>使用时包含queue头文件</li><li>queue 可以用 list 和 deque 实现，默认情况下用 deque 实现。</li><li>queue 同样也有和 stack 类似的 push、pop、top 函数。区别在于，queue 的 push 发生在队尾，pop 和 top 发生在队头。<br>priority_queue 可以用 vector 和 deque 实现，默认情况下用 vector 实现。</li><li>priority_queue 默认的元素比较器是 less <T>。也就是说，在默认情况下，要放入 priority_queue 的元素必须是能用“&lt;”运算符进行比较的，而且 priority _queue 保证以下条件总是成立：对于队头的元素 x 和任意非队头的元素 y，表达式“x&lt;y”必为 false。priority_queue 的第三个类型参数可以用来指定排序规则。</li></ul>
          </div>

<h2 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h2><ol>
<li>创建string</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">()</span></span>;<span class="comment">//s=""</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"123"</span>)</span></span>;<span class="comment">//s1="123"</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="number">2</span>,<span class="string">'a'</span>)</span></span>;<span class="comment">//s2="aa"</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s3</span><span class="params">(<span class="string">"12345670"</span>,<span class="number">1</span>,<span class="number">3</span>)</span></span>;<span class="comment">//s4="234"</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>赋值</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1,s2;</span><br><span class="line">s1 = <span class="string">"Hello,world"</span>;</span><br><span class="line">s2 = <span class="string">'a'</span>;<span class="comment">//</span></span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>string的成员函数assig()也可以用来赋值，约等于’=’;</p>
          </div>

<ol start="3">
<li><p>求长度</p>
<blockquote>
<p>s.length()或者s.size()</p>
</blockquote>
</li>
<li><p>字符串连接</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s1.append(s2);</span><br><span class="line">s1.append(s2,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">s1.append(<span class="number">3</span>,<span class="string">'a'</span>);</span><br></pre></td></tr></table></figure>
<ol start="5">
<li>string对象比较<blockquote>
<p>可以用&lt; &lt;= == != &gt;= &gt;<br>可以用int compare()函数,返回值：0-&gt;相等；</p>
</blockquote>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1("hello"), s2("hello, world");</span><br><span class="line"><span class="keyword">int</span> n = s1.compare(s2);</span><br><span class="line">n = s1.compare(<span class="number">1</span>, <span class="number">2</span>, s2, <span class="number">0</span>, <span class="number">3</span>);  <span class="comment">//比较s1的子串 (1,2) 和s2的子串 (0,3)</span></span><br><span class="line">n = s1.compare(<span class="number">0</span>, <span class="number">2</span>, s2);  <span class="comment">// 比较s1的子串 (0,2) 和 s2</span></span><br><span class="line">n = s1.compare(<span class="string">"Hello"</span>);</span><br><span class="line">n = s1.compare(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"Hello"</span>);  <span class="comment">//比较 s1 的子串(1,2)和"Hello”</span></span><br><span class="line">n = s1.compare(<span class="number">1</span>, <span class="number">2</span>, <span class="string">"Hello"</span>, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//比较 s1 的子串(1,2)和 "Hello" 的子串(1,2)</span></span><br></pre></td></tr></table></figure>
<ol start="6">
<li>求子串</li>
</ol>
<blockquote>
<p>string substr()函数</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = s1.substr(<span class="number">2</span>, <span class="number">4</span>);  <span class="comment">// s2 = "llo"</span></span><br><span class="line">s2 = s1.substr(<span class="number">1</span>);  <span class="comment">// s2 = "ello"</span></span><br></pre></td></tr></table></figure>
<ol start="7">
<li>交换<blockquote>
<p>swap()</p>
</blockquote>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1("123"),s2("456");</span><br><span class="line">s1.swap(s2);</span><br></pre></td></tr></table></figure>
<ol start="8">
<li>查找</li>
</ol>
<div class="note success">
            <ul><li>find：从前往后查找子串或字符出现的位置。</li><li>rfind：从后往前查找子串或字符出现的位置。</li><li>find_first_of：从前往后查找何处出现另一个字符串中包含的字符。例如：s1.find_first_of(“ab”);  //查找s1中第一次出现”ab”中任一字符的位置</li><li>find_last_of：从后往前查找何处出现另一个字符串中包含的字符。</li><li>find_first_not_of：从前往后查找何处出现另一个字符串中没有包含的字符。</li><li>find_last_not_of：从后往前查找何处出现另一个字符串中没有包含的字符</li></ul>
          </div>

<ol start="9">
<li>替换子串</li>
</ol>
<blockquote>
<p>replace()</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s1</span><span class="params">(<span class="string">"hahahaha"</span>)</span></span>;</span><br><span class="line">s1.replace(<span class="number">1</span>, <span class="number">3</span>, <span class="string">"123456"</span>, <span class="number">2</span>, <span class="number">4</span>);  <span class="comment">//用 "123456" 的子串从2开始的4个元素 替换 s1 的子串(1,3)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出 h3456haha</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">s2</span><span class="params">(<span class="string">"xixixi"</span>)</span></span>;</span><br><span class="line">s2.replace(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">'0'</span>);  <span class="comment">//用 5 个 '0' 替换子串(2,3)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出 xi00000xi</span></span><br><span class="line"><span class="keyword">int</span> n = s2.find(<span class="string">"OOOOO"</span>);  <span class="comment">//查找子串 "00000" 的位置，n=2</span></span><br><span class="line">s2.replace(n, <span class="number">5</span>, <span class="string">"111"</span>);  <span class="comment">//将子串(n,5)替换为"XXX"</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt; &lt; <span class="built_in">endl</span>;  <span class="comment">//输出 xi1110xi</span></span><br></pre></td></tr></table></figure>

<ol start="10">
<li>删除字串</li>
</ol>
<blockquote>
<p>erase()成员函数可以删除 string 对象中的子串，返回值为对象自身的引用。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">s1.erase(<span class="number">1</span>,<span class="number">3</span>);<span class="comment">//范围删除</span></span><br><span class="line">s1.erase(<span class="number">2</span>);<span class="comment">//删除索引2之后的所有元素</span></span><br></pre></td></tr></table></figure>
<ol start="11">
<li>插入字符串</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string s1("hihihi"), s2("00");</span><br><span class="line">s1.insert(<span class="number">2</span>, <span class="string">"123"</span>);  <span class="comment">//在下标 2 处插入字符串"123"，s1 = "hi123hihi"</span></span><br><span class="line">s1.insert(<span class="number">3</span>, s2);  <span class="comment">//在下标 2 处插入 s2 , s1 = "hi00123hihi"</span></span><br><span class="line">s1.insert(<span class="number">3</span>, <span class="number">5</span>, <span class="string">'1'</span>);  <span class="comment">//在下标 3 处插入 5 个 'X'，s1 = "hi0111110123hihi"</span></span><br></pre></td></tr></table></figure>
<ol start="12">
<li>流转换</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"hi 99 5.21 hello k"</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">istringstream</span> <span class="title">istrStream</span><span class="params">(s)</span></span>; <span class="comment">//建立s到istrStream的联系</span></span><br><span class="line">    <span class="built_in">string</span> s1, s2;</span><br><span class="line">    <span class="keyword">int</span> n;  <span class="keyword">double</span> d;  <span class="keyword">char</span> c;</span><br><span class="line">    istrStream &gt;&gt; s1 &gt;&gt; n &gt;&gt; d &gt;&gt; s2 &gt;&gt; c; <span class="comment">//把s的内容当做输入流进行读取</span></span><br><span class="line">    <span class="built_in">ostringstream</span> ostrStream;</span><br><span class="line">    ostrStream &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span> &lt;&lt; n &lt;&lt; <span class="built_in">endl</span> &lt;&lt; d &lt;&lt; <span class="built_in">endl</span> &lt;&lt; c &lt;&lt;<span class="built_in">endl</span>;<span class="comment">//此时所有的值都已经按空格分配</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ostrStream.str();<span class="comment">//将ostrStream中的所有值显示出来</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="13">
<li>STL操作字符串</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">s</span><span class="params">(<span class="string">"afgcbed"</span>)</span></span>;</span><br><span class="line">    <span class="built_in">string</span>::iterator p = find(s.begin(), s.end(), <span class="string">'c'</span>);</span><br><span class="line">    <span class="keyword">if</span> (p!= s.end())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p - s.begin() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出 3</span></span><br><span class="line">    sort(s.begin(), s.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出 abcdefg</span></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







































]]></content>
      <categories>
        <category>c++基础</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>算法小记</title>
    <url>/2020/05/14/%E7%AE%97%E6%B3%95%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<blockquote>
<p>主要是为了记录一些常用的算法模板帮助自己巩固基础算法知识</p>
</blockquote>
<h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a><center>二分查找</cenrer></h2><a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; arr;</span><br><span class="line">        <span class="comment">//由于二分法使用前提是数据按序排列，这里伪输入，顺序从小到大</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            arr.push_back(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>,r=n,k;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入要查找元素k:"</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(arr[mid]==k) &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">"k在元素位置为:"</span>&lt;&lt;mid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(arr[mid]&gt;k)r=mid<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>c++基础</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>数据流求中位数</title>
    <url>/2020/05/20/%E6%95%B0%E6%8D%AE%E6%B5%81%E6%B1%82%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>随机产生数字并传递给一个方法。你能否完成这个方法，在每次产生新值时，寻找当前所有值的中间值（中位数）并保存。<br>中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。</p>
</blockquote>
<p><a href="https://leetcode-cn.com/problems/continuous-median-lcci/" target="_blank" rel="noopener" class="zhihu">连续中值</a></p>
<a id="more"></a>
<p>示例：</p>
<div class="note success">
            <p>addNum(1)<br>addNum(2)<br>findMedian() -&gt; 1.5<br>addNum(3)<br>findMedian() -&gt; 2</p>
          </div>

<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote>
<p>使用multiset自动排序，用一个迭代器追踪中间数即可，当set中元素为偶数时指向中间连个数叫前面的那个数字位置。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MedianFinder</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">set</span>;</span><br><span class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt;::iterator mid;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    MedianFinder():mid(<span class="built_in">set</span>.end()) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">set</span>.insert(num);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>.size()==<span class="number">1</span>) mid = <span class="built_in">set</span>.begin();</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//插在mid之后并且元素个数从偶数到奇数，mid向后移动</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">set</span>.size()%<span class="number">2</span>==<span class="number">1</span>&amp;&amp;num&gt;=*mid)++mid;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">set</span>.size()%<span class="number">2</span>==<span class="number">0</span>&amp;&amp;num&lt;*mid)--mid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedian</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">set</span>.size()%<span class="number">2</span>==<span class="number">1</span>) <span class="keyword">return</span> *mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> (*mid+*next(mid))/<span class="number">2.0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>multiset</tag>
      </tags>
  </entry>
  <entry>
    <title>K站中转内最便宜的航班</title>
    <url>/2020/05/19/K%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>有 n 个城市通过 m 个航班连接。每个航班都从城市 u 开始，以价格 w 抵达 v。<br>现在给定所有的城市和航班，以及出发城市 src 和目的地 dst，你的任务是找到从 src 到 dst 最多经过 k 站中转的最便宜的价格。 如果没有这样的路线，则输出 -1。<br><a href="https://leetcode-cn.com/problems/cheapest-flights-within-k-stops/" target="_blank" rel="noopener" class="zhihu">K站中转内最便宜的航班</a></p>
</blockquote>
<a id="more"></a>
<p>示例：</p>
<div class="note success">
            <p>输入:<br>n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]<br>src = 0, dst = 2, k = 1<br>输出: 200</p>
          </div>
<p>解释：<br> 城市航班图如下：</p>
<p><a href="https://imgchr.com/i/Y4Mpyd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/19/Y4Mpyd.png" alt="Y4Mpyd.png"></a></p>
<div class="note info">
            <p>从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</p>
          </div>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<ol>
<li>Bellman-Ford算法：循环k轮，一轮代表着更新scr可达结点集合U，第二轮更新U集合的结点</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;cheapest_cost(n, INT_MAX);</span><br><span class="line">		cheapest_cost[src] = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K; ++i)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="comment">//在每一轮的更新中保留cheapest_cost()的原始状态</span></span><br><span class="line">			<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;new_cheapest_cost(cheapest_cost);</span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">auto</span>&amp; flight : flights)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (cheapest_cost[flight[<span class="number">0</span>]] != INT_MAX)new_cheapest_cost[flight[<span class="number">1</span>]] = min(new_cheapest_cost[flight[<span class="number">1</span>]], cheapest_cost[flight[<span class="number">0</span>]] + flight[<span class="number">2</span>]);</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="comment">//一轮循环后更新cheapest_cost()状态</span></span><br><span class="line">			cheapest_cost = new_cheapest_cost;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> cheapest_cost[dst] == INT_MAX ? <span class="number">-1</span> : cheapest_cost[dst];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="2">
<li>DFS:限制遍历到深度为K就退出，此时如果没有到达目的节点则停止寻找</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//构建图结构</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; flight : flights)</span><br><span class="line">            m[flight[<span class="number">0</span>]].push_back(&#123;flight[<span class="number">1</span>], flight[<span class="number">2</span>]&#125;);</span><br><span class="line">    	<span class="comment">//保存最终答案</span></span><br><span class="line">        <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">        dfs(m, src, dst, K, ans, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> ans == INT_MAX ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt;&amp;m, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K, <span class="keyword">int</span>&amp; ans, <span class="keyword">int</span> cost)</span></span>&#123;</span><br><span class="line">	<span class="comment">//搜素到目的结点，返回答案</span></span><br><span class="line">        <span class="keyword">if</span>(src == dst)&#123;</span><br><span class="line">            ans = min(ans, cost);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">	<span class="comment">//搜索大于K轮，退出</span></span><br><span class="line">        <span class="keyword">if</span>(K &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; next : m[src])&#123;</span><br><span class="line">            <span class="keyword">if</span>(cost+next.second &gt;= ans)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            dfs(m, next.first, dst, K<span class="number">-1</span>, ans, cost+next.second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="3">
<li>BFS:搜索K层</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; m;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; flight : flights)</span><br><span class="line">            m[flight[<span class="number">0</span>]].push_back(&#123;flight[<span class="number">1</span>], flight[<span class="number">2</span>]&#125;);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0x7fffffff</span>;</span><br><span class="line">        bfs(m, src, dst, K, ans);</span><br><span class="line">        <span class="keyword">return</span> ans == <span class="number">0x7fffffff</span> ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">bfs</span><span class="params">(<span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt;&amp;m, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K, <span class="keyword">int</span>&amp; ans)</span></span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;q;</span><br><span class="line">	<span class="comment">//源结点入队列</span></span><br><span class="line">        q.push(&#123;src, <span class="number">0</span>&#125;);</span><br><span class="line">	<span class="comment">//记录层数</span></span><br><span class="line">        <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//这里循环K+1次，因为第一次是初始化src，处理的时经过0站的路线</span></span><br><span class="line">        <span class="keyword">while</span>(!q.empty() &amp;&amp; step &lt;= K)&#123;</span><br><span class="line">            <span class="keyword">int</span> n = q.size();</span><br><span class="line">	<span class="comment">//遍历一层的结点数</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">                pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p = q.front();</span><br><span class="line">                q.pop();</span><br><span class="line">	<span class="comment">//遍历每个结点的“孩子结点”</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; next : m[p.first])&#123;</span><br><span class="line">                    <span class="keyword">if</span>(next.second + p.second &gt;= ans)</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="keyword">if</span>(next.first == dst)</span><br><span class="line">                        ans = min(ans, next.second + p.second);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        q.push(&#123;next.first, next.second + p.second&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            step++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<ol start="4">
<li>dp:维护一个n行k+2列的数组，行代表站点标号，行列值代表从源点到此标号节点的最小代价</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findCheapestPrice</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt;&gt;&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; flight : flights)</span><br><span class="line">            m[flight[<span class="number">0</span>]].push_back(&#123;flight[<span class="number">1</span>], flight[<span class="number">2</span>]&#125;);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0x7fffffff</span>;</span><br><span class="line">        mydp(n, flights, src, dst, K, ans);</span><br><span class="line">        <span class="keyword">return</span> ans == <span class="number">0x7fffffff</span> ? <span class="number">-1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mydp</span><span class="params">(<span class="keyword">int</span> n, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; flights, <span class="keyword">int</span> src, <span class="keyword">int</span> dst, <span class="keyword">int</span> K, <span class="keyword">int</span>&amp; ans)</span></span>&#123;</span><br><span class="line">	<span class="comment">//创建代价数组</span></span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;dp(n, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(K+<span class="number">2</span>, <span class="number">0x7fffffff</span>));</span><br><span class="line">	<span class="comment">//初始化源结点代价</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= K+<span class="number">1</span>; i++)</span><br><span class="line">            dp[src][i] = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//更新从源结点到k层可达结点的最小代价</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= K+<span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; flight : flights)&#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[flight[<span class="number">0</span>]][i<span class="number">-1</span>] != <span class="number">0x7fffffff</span>)</span><br><span class="line">                    dp[flight[<span class="number">1</span>]][i] = min(dp[flight[<span class="number">1</span>]][i], dp[flight[<span class="number">0</span>]][i<span class="number">-1</span>]+flight[<span class="number">2</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = dp[dst][K+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>SingleNumber</title>
    <url>/2020/05/14/SingleNumber/</url>
    <content><![CDATA[<p>##题目描述<br><a href="https://leetcode-cn.com/problems/single-number/" target="_blank" rel="noopener" class="zhihu">SingleNumber<br></a></p>
<blockquote>
<p>给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。</p>
</blockquote>
<p>示例：</p>
<blockquote>
<p>输入: [4,1,2,1,2]<br>输出: 4</p>
</blockquote>
<a id="more"></a>


<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>####方案1：异或操作</p>
<blockquote>
<p><font color=red>异或操作性质：相同的两个元素异或之后的0,不同的连个元素异或得1</font> </p>
</blockquote>
<p>了解到了异或的性质，可以看出，由于题中只有一个元素出现一次，其他元素都是出现两次，那么将所有得元素异或，结果就是那个单个得元素</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">singleNumber</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> e: nums) ret ^= e;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>最长连续序列</title>
    <url>/2020/06/06/%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="note success">
            <p>给定一个未排序的整数数组，找出最长连续序列的长度。<br>要求算法的<font color=red>时间复杂度为 O(n)。</font></p>
          </div>

<p><a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener" class="zhihu">最长连续序列</a></p>
<a id="more"></a>

<p>示例：</p>
<blockquote>
<p>输入: [100, 4, 200, 1, 3, 2]<br>输出: 4<br>解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>首先转化为hash表，对于元素i，如果i+1在hash表中，则长度(curlen)+1,继续在hash中查i+2.. 。外层遍历时间复杂度是O(n),hash匹配时间复杂度是O(1)，满足要求。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">longestConsecutive</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">unordered_set</span>&lt;<span class="keyword">int</span>&gt; set_num;</span><br><span class="line">        <span class="comment">// 存入set中去重</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">int</span>&amp; num:nums)&#123;</span><br><span class="line">            set_num.insert(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> longSub = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> num:set_num)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!set_num.count(num<span class="number">-1</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> cur_num = num;</span><br><span class="line">                <span class="keyword">int</span> cur_len = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">while</span>(set_num.count(cur_num+<span class="number">1</span>))&#123;</span><br><span class="line">                    ++cur_num;</span><br><span class="line">                    ++cur_len;</span><br><span class="line">                &#125;</span><br><span class="line">                longSub = max(longSub,cur_len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> longSub;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>最大连续序列和</title>
    <url>/2020/06/06/%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD%E5%BA%8F%E5%88%97%E5%92%8C/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="note info">
            <p>给定一个整数数组，找出总和最大的连续数列，并返回总和。</p>
          </div>

<p><a href="https://leetcode-cn.com/problems/contiguous-sequence-lcci/" target="_blank" rel="noopener" class="zhihu">连续数列</a></p>
<a id="more"></a>

<p>示例：</p>
<blockquote>
<p>输入： [-2,1,-3,4,-1,2,1,-5,4]<br>输出： 6<br>解释： 连续子数组 [4,-1,2,1] 的和最大，为 6。</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>1.动态规划<br>状态：dp[i]表示i之前所有元素的最大连续序列和<br>状态转移：若num[i-1]&gt;0，则dp[i]=dp[i-1]+nums[i],else:dp[i]=nums[i]</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">       <span class="comment">// 动态规划</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> INT_MIN; </span><br><span class="line">        <span class="keyword">int</span> maxSum = nums[<span class="number">0</span>];</span><br><span class="line">		<span class="comment">//遍历循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i<span class="number">-1</span>] &gt;= <span class="number">0</span>)</span><br><span class="line">                nums[i] += nums[i<span class="number">-1</span>];</span><br><span class="line">            maxSum = max(maxSum, nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>2.分治</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 分治法</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.size() == <span class="number">0</span>) <span class="keyword">return</span> INT_MIN;</span><br><span class="line">        <span class="keyword">return</span> divide(nums,<span class="number">0</span>,nums.size()<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left == right) <span class="keyword">return</span> nums[left];</span><br><span class="line">        <span class="keyword">int</span> mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 最大数列和在左边</span></span><br><span class="line">        <span class="keyword">int</span> sumLeft = divide(nums,left,mid);</span><br><span class="line">        <span class="comment">// 最大数列和在右边</span></span><br><span class="line">        <span class="keyword">int</span> sumRight = divide(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">        <span class="comment">// 横跨左右的情况，求左边和右边最大和</span></span><br><span class="line">        <span class="comment">// 求左边的最大和</span></span><br><span class="line">        <span class="keyword">int</span> leftSum = <span class="number">0</span>,leftMaxSum = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = mid; i &gt;= left; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            leftSum += nums[i];</span><br><span class="line">            leftMaxSum = max(leftMaxSum,leftSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 求右边的最大和</span></span><br><span class="line">        <span class="keyword">int</span> rightSum = <span class="number">0</span>,rightMaxSum = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = mid + <span class="number">1</span>; i &lt;= right; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            rightSum += nums[i];</span><br><span class="line">            rightMaxSum = max(rightMaxSum,rightSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max(max(sumLeft,sumRight),leftMaxSum+rightMaxSum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的层数遍历</title>
    <url>/2020/05/13/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<p>##题目描述</p>
<blockquote>
<p>给你一个二叉树，请你返回其按 层序遍历得到的节点值。(即逐层地，从左到右访问所有节点)<br><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener" class="zhihu">二叉树的层数遍历</a></p>
</blockquote>
<a id="more"></a>

<p>示例：</p>
<p>二叉树：[3,9,20,null,null,15,7]<br><img src="https://s1.ax1x.com/2020/05/13/YdRbEq.png" alt="样例.png"></p>
<p>返回遍历结果：<br><img src="https://s1.ax1x.com/2020/05/13/YdRv2F.png" alt="结果.png"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>方案1：广度优先遍历(BFS)</p>
</blockquote>
<p>思路，由题目可以直观的想到需要使用广度优先遍历来求解，借助队列来完成，将每一层的节点从左到右进入队列，然后遍历这层的节点的子结点，如果含有子结点，子结点入队列，自己弹出队列，依次类推…</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//保存结果</span></span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt;&gt; ret;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span> ret;</span><br><span class="line">		<span class="comment">//队列维护</span></span><br><span class="line">        <span class="built_in">queue</span> &lt;TreeNode*&gt; q;</span><br><span class="line">        q.push(root);</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">			<span class="comment">//每一层元素的个数</span></span><br><span class="line">            <span class="keyword">int</span> currentLevelSize = q.size();</span><br><span class="line">            ret.push_back(<span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; ());</span><br><span class="line">			<span class="comment">//求每个元素的子结点，如果存在便进入队列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= currentLevelSize; ++i) &#123;</span><br><span class="line">                <span class="keyword">auto</span> node = q.front(); q.pop();</span><br><span class="line">                ret.back().push_back(node-&gt;val);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;left) q.push(node-&gt;left);</span><br><span class="line">                <span class="keyword">if</span> (node-&gt;right) q.push(node-&gt;right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方案2：深度优先遍历(DFS)</p>
</blockquote>
<p>思路：深度优先遍历求解这个问题的核心就是遍历到每一层时都有一个level变量来记录该层次，到进行第二个方向的DFS时检查level，如果res的size小于level，则res创建一个离别来保存level层的所有节点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; <span class="title">levelOrder</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        dfs(res, root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; res, TreeNode* root, <span class="keyword">int</span> level)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (level &gt;= res.size())</span><br><span class="line">            res.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        res[level].push_back(root-&gt;val);</span><br><span class="line">        dfs(res, root-&gt;left, level + <span class="number">1</span>);</span><br><span class="line">        dfs(res, root-&gt;right, level + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="快速模板-BFS"><a href="#快速模板-BFS" class="headerlink" title="快速模板(BFS)"></a>快速模板(BFS)</h2><ol>
<li>不需要确定遍历到哪一层</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">queue</span> 不空：</span><br><span class="line">    cur = <span class="built_in">queue</span>.pop()</span><br><span class="line">    <span class="keyword">for</span> 节点 in cur的所有相邻节点：</span><br><span class="line">        <span class="keyword">if</span> 该节点有效且未访问过：</span><br><span class="line">            <span class="built_in">queue</span>.push(该节点)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>需要知道遍历到那一层<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">level = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">queue</span> 不空：</span><br><span class="line">    size = <span class="built_in">queue</span>.size()</span><br><span class="line">    <span class="keyword">while</span> (size --) &#123;</span><br><span class="line">        cur = <span class="built_in">queue</span>.pop()</span><br><span class="line">        <span class="keyword">for</span> 节点 in cur的所有相邻节点：</span><br><span class="line">            <span class="keyword">if</span> 该节点有效且未被访问过：</span><br><span class="line">                <span class="built_in">queue</span>.push(该节点)</span><br><span class="line">    &#125;</span><br><span class="line">    level ++;</span><br></pre></td></tr></table></figure>

</li>
</ol>
]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>找到小镇法官</title>
    <url>/2020/06/04/%E6%89%BE%E5%88%B0%E5%B0%8F%E9%95%87%E6%B3%95%E5%AE%98/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="note info">
            <p>在一个小镇里，按从 1 到 N 标记了 N 个人。传言称，这些人中有一个是小镇上的秘密法官。<br>如果小镇的法官真的存在，那么：</p><ul><li>小镇的法官不相信任何人。<br></li><li>每个人（除了小镇法官外）都信任小镇的法官。</li><li>只有一个人同时满足属性 1 和属性 2 。</li></ul><p>给定数组 trust，该数组由信任对 trust[i] = [a, b] 组成，表示标记为 a 的人信任标记为 b 的人。<br>如果小镇存在秘密法官并且可以确定他的身份，请返回该法官的标记。否则，返回 -1。</p>
          </div>
<a id="more"></a>
<p><a href = "https://leetcode-cn.com/problems/find-the-town-judge/" class="zhihu">找到小镇法官</a></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>找到出度为0入度为N-1的那个唯一的节点就是法官</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findJudge</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; trust)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">count1</span><span class="params">(N+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">count2</span><span class="params">(N+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t:trust)&#123;</span><br><span class="line">            count1[t[<span class="number">1</span>]]++;</span><br><span class="line">            count2[t[<span class="number">0</span>]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>,res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count1[i]==N<span class="number">-1</span>&amp;&amp;count2[i]==<span class="number">0</span>)&#123;</span><br><span class="line">                num++;</span><br><span class="line">                res = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>优化：使用一个数组维护，对于(a,b),出现在左面得元素已经不是法官，投票-1，出现在右边的作为法官候选人，最后投票数为N-1的就是法官（一个人只能投同一个人一票，法官不能投自己）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findJudge</span><span class="params">(<span class="keyword">int</span> N, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; trust)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">count1</span><span class="params">(N+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; t:trust)&#123;</span><br><span class="line">            count1[t[<span class="number">1</span>]]++;</span><br><span class="line">            count1[t[<span class="number">0</span>]]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>,res;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count1[i]==N<span class="number">-1</span>)&#123;</span><br><span class="line">                num++;</span><br><span class="line">                res = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">1</span>)<span class="keyword">return</span> res;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>拥有最多糖果的孩子</title>
    <url>/2020/06/01/%E6%8B%A5%E6%9C%89%E6%9C%80%E5%A4%9A%E7%B3%96%E6%9E%9C%E7%9A%84%E5%AD%A9%E5%AD%90/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="note info">
            <p>给你一个数组 candies 和一个整数 extraCandies ，其中 candies[i] 代表第 i 个孩子拥有的糖果数目。对每一个孩子，检查是否存在一种方案，将额外的 extraCandies 个糖果分配给孩子们之后，此孩子有 最多 的糖果。注意，允许有多个孩子同时拥有 最多 的糖果数目。</p>
          </div>

<p><a href="https://leetcode-cn.com/problems/kids-with-the-greatest-number-of-candies/" target="_blank" rel="noopener" class="zhihu"> 拥有最多糖果的孩子</a></p>
<a id="more"></a>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; <span class="title">kidsWithCandies</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; candies, <span class="keyword">int</span> extraCandies)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = candies.size();</span><br><span class="line">        <span class="keyword">int</span> maxCandies = *max_element(candies.begin(), candies.end());</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; ret;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            ret.push_back(candies[i] + extraCandies &gt;= maxCandies);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="新知识"><a href="#新知识" class="headerlink" title="新知识"></a>新知识</h2><p>max_element(r,r+5):返回数组r从0到5之间最大数的迭代器。</p>
]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>寻找两个正序数组的中位数</title>
    <url>/2020/05/24/%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><div class="note info">
            <p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出这两个正序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。你可以假设 nums1 和 nums2 不会同时为空。</p>
          </div>
<p><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener" class="zhihu">寻找两个正序数组的中位数(困难)</a></p>
<a id="more"></a>
<p>示例：</p>
<div class="note success">
            <p>nums1 = [1, 3]<br>nums2 = [2]<br>则中位数是 2.0</p>
          </div>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>1.只能想到普通方案,合并链表，寻找中位数,时间复杂度O(m+n)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> A=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> B=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> sum_a=nums1.size();</span><br><span class="line">        <span class="keyword">int</span> sum_b=nums2.size();</span><br><span class="line">        <span class="keyword">int</span> count=sum_a+sum_b;</span><br><span class="line">        <span class="keyword">int</span> <span class="built_in">list</span>[count];</span><br><span class="line">        <span class="keyword">double</span> middle=<span class="number">0.0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum&lt;count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum_a!=<span class="number">0</span>&amp;&amp;sum_b!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums1[A]&lt;=nums2[B])</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">list</span>[sum]=nums1[A];</span><br><span class="line">                    A++;</span><br><span class="line">                    sum_a--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">list</span>[sum]=nums2[B];</span><br><span class="line">                    B++;</span><br><span class="line">                    sum_b--;</span><br><span class="line">                 &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(sum_b==<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">list</span>[sum]=nums1[A];</span><br><span class="line">                A++;</span><br><span class="line">                sum_a--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">list</span>[sum]=nums2[B];</span><br><span class="line">                B++;</span><br><span class="line">                sum_b--;</span><br><span class="line">            &#125;</span><br><span class="line">            sum++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            middle=(<span class="built_in">list</span>[sum/<span class="number">2</span><span class="number">-1</span>]+<span class="built_in">list</span>[sum/<span class="number">2</span>])/<span class="number">2.0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            middle=<span class="built_in">list</span>[(<span class="keyword">int</span>)(sum/<span class="number">2</span>)];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> middle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<ol start="2">
<li><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/shuang-zhi-zhen-by-powcai/" target="_blank" rel="noopener">大佬题解</a></li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums1, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n1 = nums1.size();</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> n2 = nums2.size();</span><br><span class="line">        <span class="keyword">if</span>(n1&gt;n2) <span class="keyword">return</span> findMedianSortedArrays(nums2, nums1);</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> k = (n1 + n2 + <span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n1;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> m1 = left + (right - left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">int</span> m2 = k - m1;</span><br><span class="line">            <span class="keyword">if</span>(nums1[m1]&lt;nums2[m2<span class="number">-1</span>])</span><br><span class="line">                left = m1 + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                right = m1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> m1 = left;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> m2 = k - left;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> c1 = max(m1 &lt;= <span class="number">0</span> ? INT_MIN:nums1[m1<span class="number">-1</span>],</span><br><span class="line">                          m2 &lt;= <span class="number">0</span> ? INT_MIN:nums2[m2<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">if</span>((n1 + n2)%<span class="number">2</span> == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> c1;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> c2 = min(m1 &gt;= n1 ? INT_MAX: nums1[m1],</span><br><span class="line">                      m2 &gt;= n2 ? INT_MAX : nums2[m2]);</span><br><span class="line">        <span class="keyword">return</span> (c1 + c2) * <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>最小覆盖字串</title>
    <url>/2020/05/23/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%97%E4%B8%B2/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字符的最小子串。</p>
</blockquote>
<p><a href="https://leetcode-cn.com/problems/minimum-window-substring/" target="_blank" rel="noopener" class="zhihu">最小覆盖字串</a></p>
<a id="more"></a>
<p>示例：</p>
<div class="note default">
            <p>输入: S = “ADOBECODEBANC”, T = “ABC”<br>输出: “BANC”</p>
          </div>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>滑动窗口:采用双指针，用两个hash表来分别记录t串每个字符出现的次数，s字串窗口内字符出现的次数，移动窗口前后指针动态改变窗口大小以及hash表中的值来更新最小字串。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span> &lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; ori, cnt;</span><br><span class="line">	<span class="comment">//检查滑动窗口中的每个字符个数是否大于等于t的字符个数</span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;p: ori) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt[p.first] &lt; p.second) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">minWindow</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">string</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;c: t) &#123;</span><br><span class="line">            ++ori[c];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">int</span> len = INT_MAX, ansL = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span> (r &lt; <span class="keyword">int</span>(s.size())) &#123;</span><br><span class="line">			<span class="comment">//更新窗口</span></span><br><span class="line">            <span class="keyword">if</span> (ori.find(s[++r]) != ori.end()) &#123;</span><br><span class="line">                ++cnt[s[r]];</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//检查窗口内字符是否满足要求</span></span><br><span class="line">            <span class="keyword">while</span> (check() &amp;&amp; l &lt;= r) &#123;</span><br><span class="line">				<span class="comment">//满足要求，更新结果值</span></span><br><span class="line">                <span class="keyword">if</span> (r - l + <span class="number">1</span> &lt; len) &#123;</span><br><span class="line">                    len = r - l + <span class="number">1</span>;</span><br><span class="line">                    ansL = l;</span><br><span class="line">                &#125;</span><br><span class="line">				<span class="comment">//更新窗口左指针，向前移动一个，如果指针所在位置是t中的字符，则窗口对应字符数目减一</span></span><br><span class="line">                <span class="keyword">if</span> (ori.find(s[l]) != ori.end()) &#123;</span><br><span class="line">                    --cnt[s[l]];</span><br><span class="line">                &#125;</span><br><span class="line">                ++l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ansL == <span class="number">-1</span> ? <span class="built_in">string</span>() : s.substr(ansL, len);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>乘积最大子数组</title>
    <url>/2020/05/18/%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>##题目描述</p>
<p><a href="https://leetcode-cn.com/problems/maximum-product-subarray/" target="_blank" rel="noopener" class="zhihu">乘积最大子数组</a></p>
<blockquote>
<p>给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [2,3,-2,4]</span><br><span class="line">输出: 6</span><br><span class="line">解释: 子数组 [2,3] 有最大乘积 6。</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>##解决方案</p>
<blockquote>
<p>总解题思路：动态规划</p>
<blockquote>
<p>遍历数组时计算当前最大值，不断更新<br>令imax为当前最大值，则当前最大值为 imax = max(imax * nums[i], nums[i])<br>但是由于有负数，遇到负数时会出现最大数变为最小数，最小数变成最大数，所以还要维护当前的最小值，imin = min(imin * nums[i], nums[i])<br>当负数出现时则imax与imin进行交换再进行下一步计算<br>时间复杂度：O(n)O(n)</p>
</blockquote>
</blockquote>
<ol>
<li>最简单方法<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = Integer.MIN_VALUE, imax = <span class="number">1</span>, imin = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; <span class="number">0</span>)&#123; </span><br><span class="line">              <span class="keyword">int</span> tmp = imax;</span><br><span class="line">              imax = imin;</span><br><span class="line">              imin = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">            imax = Math.max(imax*nums[i], nums[i]);</span><br><span class="line">            imin = Math.min(imin*nums[i], nums[i]);</span><br><span class="line">            </span><br><span class="line">            max = Math.max(max, imax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>用数组维护，</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; maxF(nums), minF(nums);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            maxF[i] = max(maxF[i - <span class="number">1</span>] * nums[i], max(nums[i], minF[i - <span class="number">1</span>] * nums[i]));</span><br><span class="line">            minF[i] = min(minF[i - <span class="number">1</span>] * nums[i], min(nums[i], maxF[i - <span class="number">1</span>] * nums[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *max_element(maxF.begin(), maxF.end());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>用变量维护</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxF = nums[<span class="number">0</span>], minF = nums[<span class="number">0</span>], ans = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> mx = maxF, mn = minF;</span><br><span class="line">            maxF = max(mx * nums[i], max(nums[i], mn * nums[i]));</span><br><span class="line">            minF = min(mn * nums[i], min(nums[i], mx * nums[i]));</span><br><span class="line">            ans = max(maxF, ans);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>课程表</title>
    <url>/2020/05/17/%E8%AF%BE%E7%A8%8B%E8%A1%A8/</url>
    <content><![CDATA[<p>##题目描述</p>
<blockquote>
<p>现在你总共有 n 门课需要选，记为 0 到 n-1。<br>在选修某些课程之前需要一些先修课程。 例如，想要学习课程 0 ，你需要先完成课程 1 ，我们用一个匹配来表示他们: [0,1]<br>给定课程总量以及它们的先决条件，返回你为了学完所有课程所安排的学习顺序。</p>
</blockquote>
<a id="more"></a>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 4, [[1,0],[2,0],[3,1],[3,2]]</span><br><span class="line">输出: [0,1,2,3] or [0,2,1,3]</span><br><span class="line">解释: 总共有 4 门课程。要学习课程 3，你应该先完成课程 1 和课程 2。并且课程 1 和课程 2 都应该排在课程 0 之后。</span><br><span class="line">     因此，一个正确的课程顺序是 [0,1,2,3] 。另一个正确的排序是 [0,2,1,3] 。</span><br></pre></td></tr></table></figure>
<p><a href="https://leetcode-cn.com/problems/course-schedule-ii/" target="_blank" rel="noopener" class="zhihu">课程表2</a></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>有题意可知，这是一个关于图的拓扑排序问题，首先认清两个问题<br>1.如果图中含有环，那么这个图是没有拓扑结构的(即识别环的问题)<br>2.一个图如果无环，那么它的拓扑结构可能不止一个。</p>
</blockquote>
<h3 id="方案1：广度优先遍历BFS"><a href="#方案1：广度优先遍历BFS" class="headerlink" title="方案1：广度优先遍历BFS"></a>方案1：广度优先遍历BFS</h3><blockquote>
<p>根据题目构建出一个图，那么可以利用队列，首先根节点(选择一个入度为0的节点)开始，入队列，人后删除这个节点与其他节点的边，检查其他节点，如果有入度为0的，入队…直到结束，如果在过程中(有剩余节点)不存在入读为0的节点，可以断定有环存在，退出。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">// 存储有向图</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">    <span class="comment">// 存储每个节点的入度</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indeg;</span><br><span class="line">    <span class="comment">// 存储答案</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findOrder</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        edges.resize(numCourses);</span><br><span class="line">        indeg.resize(numCourses);</span><br><span class="line">		<span class="comment">//将所有的数据存入'图'中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; info: prerequisites) &#123;</span><br><span class="line">            edges[info[<span class="number">1</span>]].push_back(info[<span class="number">0</span>]);</span><br><span class="line">            ++indeg[info[<span class="number">0</span>]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="comment">// 将所有入度为 0 的节点放入队列中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numCourses; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (indeg[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">            <span class="comment">// 从队首取出一个节点</span></span><br><span class="line">            <span class="keyword">int</span> u = q.front();</span><br><span class="line">            q.pop();</span><br><span class="line">            <span class="comment">// 放入答案中</span></span><br><span class="line">            result.push_back(u);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> v: edges[u]) &#123;</span><br><span class="line">                --indeg[v];</span><br><span class="line">                <span class="comment">// 如果相邻节点 v 的入度为 0，就可以选 v 对应的课程了</span></span><br><span class="line">                <span class="keyword">if</span> (indeg[v] == <span class="number">0</span>) &#123;</span><br><span class="line">                    q.push(v);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (result.size() != numCourses) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>###方案2：深度优先遍历：DFS</p>
<blockquote>
<p>前面提到，广度优先遍历是从前向后遍历，很容易理解，换个角度，可以从后往前来处理，采用栈来处理结果，设节点u，节点u能够入栈的前提是没有后驱节点，即出度为0，这里设每个节点有三个状态:为搜索，搜索中，已完成，对于节点u，遍历该节点的每一个相邻节点 v</p>
<blockquote>
<p>如果 v 为「未搜索」，那么我们开始搜索 v，待搜索完成回溯到 u；<br>如果 v 为「搜索中」，那么我们就找到了图中的一个环，因此是不存在拓扑排序的；<br>如果 v 为「已完成」，那么说明 v 已经在栈中了，而 u 还不在栈中，因此 u 无论何时入栈都不会影响到 (u, v)之前的拓扑关系，以及不用进行任何操作。<br>当 uu 的所有相邻节点都为「已完成」时，我们将 uu 放入栈中，并将其标记为「已完成」。</p>
</blockquote>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	<span class="comment">//存储图结构</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; edges;</span><br><span class="line">	<span class="comment">//存储所有节点的状态</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; visited;</span><br><span class="line">	<span class="comment">//保存结果</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;result;</span><br><span class="line">	<span class="comment">//判断是否有环</span></span><br><span class="line">    <span class="keyword">bool</span> hascir = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="comment">//深度优先遍历节点u</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">		<span class="comment">//设置节点为1：搜索中</span></span><br><span class="line">        visited[u]=<span class="number">1</span>;</span><br><span class="line">		<span class="comment">//遍历u节点的所有相邻节点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> v:edges[u])&#123;</span><br><span class="line">			<span class="comment">//邻结点未搜索，搜索邻结点</span></span><br><span class="line">            <span class="keyword">if</span>(visited[v]==<span class="number">0</span>)&#123;</span><br><span class="line">                dfs(v);</span><br><span class="line">                <span class="keyword">if</span>(hascir)<span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">			<span class="comment">//邻结点为搜索中，存在环，退出查找</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(visited[v]==<span class="number">1</span>)&#123;</span><br><span class="line">                hascir = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">		<span class="comment">//处理未完成，入栈</span></span><br><span class="line">        visited[u]=<span class="number">2</span>;</span><br><span class="line">        result.push_back(u);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">findOrder</span><span class="params">(<span class="keyword">int</span> numCourses, <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt;&amp; prerequisites)</span> </span>&#123;</span><br><span class="line">        edges.resize(numCourses);</span><br><span class="line">        visited.resize(numCourses);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">const</span> <span class="keyword">auto</span>&amp; index:prerequisites)&#123;</span><br><span class="line">            edges[index[<span class="number">1</span>]].push_back(index[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;numCourses&amp;&amp;!hascir;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!visited[i])</span><br><span class="line">                dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(hascir)<span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">        reverse(result.begin(),result.end());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>DFS</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据流中的第K大元素</title>
    <url>/2020/05/16/%E6%95%B0%E6%8D%AE%E6%B5%81%E4%B8%AD%E7%9A%84%E7%AC%ACK%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<p>##题目描述<br><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/" target="_blank" rel="noopener" class="zhihu">数据流中的第K大元素</a></p>
<blockquote>
<p>设计一个找到<font color=red>数据流</font>中第K大元素的类（class）设计的KthLargest 类需要一个同时接收整数 k 和整数数组nums 的构造器，它包含数据流中的初始元素。每次调用 KthLargest.add，返回当前数据流中第K大的元素。</p>
</blockquote>
<a id="more"></a>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int k &#x3D; 3;</span><br><span class="line">int[] arr &#x3D; [4,5,8,2];</span><br><span class="line">KthLargest kthLargest &#x3D; new KthLargest(3, arr);</span><br><span class="line">kthLargest.add(3);   &#x2F;&#x2F; returns 4</span><br><span class="line">kthLargest.add(5);   &#x2F;&#x2F; returns 5</span><br><span class="line">kthLargest.add(10);  &#x2F;&#x2F; returns 5</span><br><span class="line">kthLargest.add(9);   &#x2F;&#x2F; returns 8</span><br><span class="line">kthLargest.add(4);   &#x2F;&#x2F; returns 8</span><br></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>方案1，利用set的自动排序</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KthLargest</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> K;</span><br><span class="line">    <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    KthLargest(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            st.insert(n);</span><br><span class="line">            <span class="keyword">if</span> (st.size() &gt; k) st.erase(st.begin());</span><br><span class="line">        &#125;       </span><br><span class="line">        K = k;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        st.insert(val);</span><br><span class="line">        <span class="keyword">if</span> (st.size() &gt; K) st.erase(st.begin());</span><br><span class="line">        <span class="keyword">return</span> *st.begin();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>方案2：优先级队列</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KthLargest</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> K;</span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;, greater&lt;<span class="keyword">int</span>&gt;&gt; pq;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    KthLargest(<span class="keyword">int</span> k, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> n : nums) &#123;</span><br><span class="line">            pq.push(n);</span><br><span class="line">            <span class="keyword">if</span> (pq.size() &gt; k) pq.pop();</span><br><span class="line">        &#125;       </span><br><span class="line">        K = k;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        pq.push(val);</span><br><span class="line">        <span class="keyword">if</span> (pq.size() &gt; K) pq.pop();</span><br><span class="line">        <span class="keyword">return</span> pq.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>翻转链表</title>
    <url>/2020/05/16/%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><a href="https://leetcode-cn.com/problems/reverse-nodes-in-k-group/" target="_blank" rel="noopener" class="zhihu">翻转链表 </a></p>
<blockquote>
<p>给你一个链表，每 k 个节点一组进行翻转，请你返回翻转后的链表。<br>k 是一个正整数，它的值小于或等于链表的长度。<br>如果节点总数不是 k 的整数倍，那么请将最后剩余的节点保持原有顺序。</p>
</blockquote>
<a id="more"></a>
<p>示例：<br>给你这个链表：1-&gt;2-&gt;3-&gt;4-&gt;5<br><br>当 k = 2 时，应当返回: 2-&gt;1-&gt;4-&gt;3-&gt;5<br><br>当 k = 3 时，应当返回: 3-&gt;2-&gt;1-&gt;4-&gt;5</p>
<p>##解决方案</p>
<blockquote>
<p>将链表划分为长度为k的子链表进行翻转，所以本题的重点在于子链表的翻转</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    pair&lt;ListNode*,ListNode*&gt;myreverse(ListNode* head,ListNode* tail)&#123;</span><br><span class="line">        ListNode* prep = tail-&gt;next;</span><br><span class="line">        ListNode* p = head;</span><br><span class="line">        <span class="keyword">while</span>(prep!=tail)&#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">            反转子链表，nex保存p的下一个节点，prep始终指向已经反转链表的head，</span></span><br><span class="line"><span class="comment">            **/</span></span><br><span class="line">            ListNode* nex = p-&gt;next;</span><br><span class="line">            p-&gt;next = prep;</span><br><span class="line">            prep = p;</span><br><span class="line">            p = nex;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;tail,head&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ListNode* <span class="title">reverseKGroup</span><span class="params">(ListNode* head, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个头节点，易于返回的反转子链表重新插入到原来的链表中</span></span><br><span class="line">        ListNode* hair = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        hair-&gt;next = head;</span><br><span class="line">        <span class="comment">//用于保存反转后的子链表返回的链表的右节点的前驱节点</span></span><br><span class="line">        ListNode* prep = hair;</span><br><span class="line">        <span class="keyword">while</span>(head)&#123;</span><br><span class="line">            <span class="comment">//判断剩下的链表元素是否有k个</span></span><br><span class="line">            ListNode* tail = prep;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">                tail = tail-&gt;next;</span><br><span class="line">                <span class="comment">//不足k个就返回结果</span></span><br><span class="line">                <span class="keyword">if</span>(!tail)<span class="keyword">return</span> hair-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//保存翻转前的tail的next结点以便反转之后可以插入原链表</span></span><br><span class="line">            ListNode* nex = tail-&gt;next;</span><br><span class="line">            tie(head,tail) = myreverse(head,tail);</span><br><span class="line">            prep-&gt;next = head;</span><br><span class="line">            tail-&gt;next = nex;</span><br><span class="line">            prep = tail;</span><br><span class="line">            head = tail-&gt;next;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> hair-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>栈的基本应用-基本计算器</title>
    <url>/2020/05/12/%E6%A0%88%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problems/basic-calculator/" target="_blank" rel="noopener" class="zhihu">基本计算器</a></p>
<h2 id="基本计算器"><a href="#基本计算器" class="headerlink" title="基本计算器"></a>基本计算器</h2><blockquote>
<p>简介：实现一个基本的计算器来计算一个简单的字符串表达式的值。<br>字符串表达式可以包含左括号(,右括号),加号+,减号-,非负整数和空格。</p>
</blockquote>
<a id="more"></a>
<p>示例1</p>
<blockquote>
<p>输入: “(1+(4+5+2)-3)+(6+8)”</p>
<p>输出: 23</p>
</blockquote>
<h2 id="解题思路1"><a href="#解题思路1" class="headerlink" title="解题思路1"></a>解题思路1</h2><blockquote>
<p>使用两个栈，一个用来存操作数num，一个用来存操作符opr。<br>首先处理数字字符串，在遇到左括号”(“之前,进行正常运算，类似于1+2+(3+4-5)…，可以先进行1+2,保存在res中，遇到’(‘，此时opr=’+’,res=3，进行压栈，此时将res和opr重新进行初始化，进行(里面的操作记录。<br>直到遇到”)”,此时opr=’-‘,res=3+4=7;num=5,因此首先运算res=res opr num;此时将两个栈顶保存的操作数(3)操作符(+)弹出，与刚刚的res运算之后保存在res中，此时到第一个)之前的运算全部结束，依次进行下一个运算…</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//双栈解法，一个保留操作符，一个保留操作数</span></span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; numStack;</span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">char</span>&gt; chaStack;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> opr = <span class="string">'+'</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> n:s)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">'0'</span>&lt;=n&amp;&amp;n&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                num=(num*<span class="number">10</span>+(n-<span class="string">'0'</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="string">'+'</span>||n==<span class="string">'-'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(opr==<span class="string">'+'</span>)&#123;</span><br><span class="line">                    res+=num;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(opr==<span class="string">'-'</span>)&#123;</span><br><span class="line">                    res-=num;</span><br><span class="line">                &#125;</span><br><span class="line">                opr=n;</span><br><span class="line">                num=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="string">'('</span>)&#123;</span><br><span class="line">                numStack.push(res);</span><br><span class="line">                chaStack.push(opr);</span><br><span class="line">                res = <span class="number">0</span>;</span><br><span class="line">                opr = <span class="string">'+'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(opr==<span class="string">'+'</span>) res+=num;</span><br><span class="line">                <span class="keyword">if</span>(opr==<span class="string">'-'</span>) res-=num;</span><br><span class="line">                <span class="keyword">char</span> op = chaStack.top();</span><br><span class="line">                <span class="keyword">int</span> nubef = numStack.top();</span><br><span class="line">                <span class="keyword">if</span>(op==<span class="string">'+'</span>)res = nubef+res;</span><br><span class="line">                <span class="keyword">else</span> res = nubef-res;</span><br><span class="line">                chaStack.pop();</span><br><span class="line">                numStack.pop();</span><br><span class="line">                opr=<span class="string">'+'</span>;</span><br><span class="line">                num=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(opr==<span class="string">'+'</span>)res+=num;</span><br><span class="line">        <span class="keyword">else</span> res-=num;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>##解题思路2</p>
<blockquote>
<h4>字符串逆序入栈求解</h4>
思路：入栈之前不进行运算，直到遇到第一个"("（逆序，先遇到”)“）,再进行前面的数求解
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">calculate</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单栈，采用逆序求解，同时保存操作数和操作符</span></span><br><span class="line">        <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; sta;</span><br><span class="line">        <span class="keyword">int</span> n = <span class="number">0</span>;<span class="comment">//在取数字串时记录位数</span></span><br><span class="line">        <span class="keyword">int</span> total_num=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.size()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="string">'0'</span>&lt;=s[i]&amp;&amp;s[i]&lt;=<span class="string">'9'</span>)&#123;</span><br><span class="line">                total_num=<span class="built_in">pow</span>(<span class="number">10</span>,n)*(s[i]-<span class="string">'0'</span>)+total_num;</span><br><span class="line">                n++;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(!(s[i]==<span class="string">' '</span>))&#123;</span><br><span class="line">                <span class="keyword">if</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">                    sta.push(total_num);</span><br><span class="line">                    total_num = <span class="number">0</span>;</span><br><span class="line">                    n=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(s[i]==<span class="string">'('</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = evaluateExpr(sta);</span><br><span class="line">                    sta.pop();</span><br><span class="line">                    sta.push(temp);</span><br><span class="line">                &#125;<span class="keyword">else</span> sta.push(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            sta.push(total_num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> evaluateExpr(sta);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">evaluateExpr</span><span class="params">(<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; &amp;sta)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!sta.empty())&#123;</span><br><span class="line">            res=sta.top();</span><br><span class="line">            sta.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!sta.empty()&amp;&amp;!(sta.top()==<span class="number">41</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span>(sta.top()==<span class="number">43</span>)&#123;</span><br><span class="line">                sta.pop();</span><br><span class="line">                <span class="keyword">int</span> temp = sta.top();</span><br><span class="line">                res+=temp;</span><br><span class="line">                sta.pop();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                sta.pop();</span><br><span class="line">                <span class="keyword">int</span> temp = sta.top();</span><br><span class="line">                res-=temp;</span><br><span class="line">                sta.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>C++库iomanip的一些用法</title>
    <url>/2020/05/10/C-%E5%BA%93iomanip%E7%9A%84%E4%B8%80%E4%BA%9B%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><iomanip>介绍</h2><blockquote>
<p>iomanip这个头文件中，io代表输入输出，manip是manipulator（操纵器）的缩写(在c++上只能通过输入缩写才有效).</p>
<p>主要是对cin,cout之类的一些操纵运算子，比如setfill,setw,setbase,setprecision等等。它是I/O流控制头文件,就像C里面的格式化输出一样.</p>
</blockquote>
<a id="more"></a>
<p>##基本使用</p>
<blockquote>
<p><font color=red>dec:</font>等价于于“%d”</p>
<p><font color=red>hex:</font>等价于“%x”</p>
<p><font color=red>oct:</font>等价于“%o”</p>
<p><font color=red>setfill(‘1’):</font>设置填充字符为‘1’<br><font color=red>setprecision( n )c:</font>设置显示有效数字的位数<br><font color=red>setw(n):</font>设置输出字符的域宽</p>
</blockquote>
<p>##演示</p>
<ol>
<li>进位制输出</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//十六进制</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;hex&lt;&lt;<span class="number">17</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//八进制</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;oct&lt;&lt;<span class="number">9</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>结果：<br>11<br>11</p>
</blockquote>
<ol start="2">
<li>setw(n)用法</li>
</ol>
<blockquote>
<p>预设输出数据的宽度</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不足预设宽度，空格填补</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">3</span>)&lt;&lt;<span class="number">9</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//超过预设宽度,预设宽度自增</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">3</span>)&lt;&lt;<span class="number">9999</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<blockquote>
<p>&nbsp;&nbsp;9<br>9999</p>
</blockquote>
<ol start="3">
<li>setfill(‘char’)</li>
</ol>
<blockquote>
<p>填充字符，配合setw()函数一起使用</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不足预设宽度，@填补</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;setfill(<span class="string">'@'</span>)&lt;&lt;setw(<span class="number">3</span>)&lt;&lt;<span class="number">9</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<blockquote>
<p>@@9</p>
</blockquote>
<ol start="4">
<li>setbase(int n)</li>
</ol>
<blockquote>
<p>将数字转换为 n 进制</p>
</blockquote>
<ol start="5">
<li>setprecision()</li>
</ol>
<blockquote>
<p>setprecision(n)用于控制输出流显示浮点数的数字个数。C++默认的流输出数值有效位是6。<br>与fixed连用可以控制小数位数</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不足预设宽度，@填补</span></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;fixed&lt;&lt;setprecision(<span class="number">1</span>)&lt;&lt;<span class="number">3.1245</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果：</p>
<blockquote>
<p>3.12</p>
</blockquote>
<h2 id="补充一些长用输出格式"><a href="#补充一些长用输出格式" class="headerlink" title="补充一些长用输出格式"></a>补充一些长用输出格式</h2><blockquote>
<p>setiosflags(ios::fixed) 固定的浮点显示</p>
<p>setiosflags(ios::scientific) 指数表示小数</p>
<p>setiosflags(ios::left) 左对齐</p>
<p>setiosflags(ios::right) 右对齐</p>
<p>setiosflags(ios::skipws) 忽略前导空白</p>
<p>setiosflags(ios::uppercase) 16进制数大写输出</p>
<p>setiosflags(ios::lowercase) 16进制小写输出</p>
<p>setiosflags(ios::showpoint) 强制显示小数点</p>
<p>setiosflags(ios::showpos) 强制显示符号</p>
</blockquote>
]]></content>
      <categories>
        <category>c++基础</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的最近公共祖先</title>
    <url>/2020/05/10/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
    <content><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><blockquote>
<p>力扣236题<br>给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</p>
</blockquote>
<blockquote>
<p>百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</p>
</blockquote>
<a id="more"></a>
<p>例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]<br><img src="https://s1.ax1x.com/2020/05/10/Y1cYY6.png" alt="示例树.png"></p>
<p>示例1：</p>
<blockquote>
<p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1</p>
<p>输出: 3</p>
<p>解释: 节点 5 和节点 1 的最近公共祖先是节点 3。</p>
</blockquote>
<p>示例2：</p>
<blockquote>
<p>输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4<br>输出: 5<br>解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。</p>
</blockquote>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote>
<p>方案1：dfs递归遍历</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TreeNode* res;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(TreeNode* root,TreeNode* p,TreeNode*q)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="literal">nullptr</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">bool</span> lflag = dfs(root-&gt;left,p,q);</span><br><span class="line">        <span class="keyword">bool</span> rflag = dfs(root-&gt;right,p,q);</span><br><span class="line">        <span class="keyword">if</span>((lflag&amp;&amp;rflag)||((root-&gt;val==p-&gt;val||root-&gt;val==q-&gt;val)&amp;&amp;(lflag||rflag)))&#123;</span><br><span class="line">            res=root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rflag||lflag||root-&gt;val==p-&gt;val||root-&gt;val==q-&gt;val;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        dfs(root,p,q);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>方案2：存储父节点(官方)</p>
</blockquote>
<p>思路：我们可以用哈希表存储所有节点的父节点，然后我们就可以利用节点的父节点信息从 p 结点开始不断往上跳，并记录已经访问过的节点，再从 q 节点开始不断往上跳，如果碰到已经访问过的节点，那么这个节点就是我们要找的最近公共祖先。</p>
<p>算法：</p>
<ol>
<li>从根节点开始遍历整棵二叉树，用哈希表记录每个节点的父节点指针。</li>
<li>从 p 节点开始不断往它的祖先移动，并用数据结构记录已经访问过的祖先节点。</li>
<li>同样，我们再从 q 节点开始不断往它的祖先移动，如果有祖先已经被访问过，即意味着这是 p 和 q 的深度最深的公共祖先，即 LCA 节点。</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, TreeNode*&gt; fa;</span><br><span class="line">    <span class="built_in">unordered_map</span>&lt;<span class="keyword">int</span>, <span class="keyword">bool</span>&gt; vis;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode* root)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;left != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fa[root-&gt;left-&gt;val] = root;</span><br><span class="line">            dfs(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root-&gt;right != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            fa[root-&gt;right-&gt;val] = root;</span><br><span class="line">            dfs(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode* root, TreeNode* p, TreeNode* q)</span> </span>&#123;</span><br><span class="line">        fa[root-&gt;val] = <span class="literal">nullptr</span>;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">while</span> (p != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            vis[p-&gt;val] = <span class="literal">true</span>;</span><br><span class="line">            p = fa[p-&gt;val];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (vis[q-&gt;val]) <span class="keyword">return</span> q;</span><br><span class="line">            q = fa[q-&gt;val];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>算法</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>每个元音包含偶数次最长子字符串</title>
    <url>/2020/05/20/%E6%AF%8F%E4%B8%AA%E5%85%83%E9%9F%B3%E5%8C%85%E5%90%AB%E5%81%B6%E6%95%B0%E6%AC%A1%E6%9C%80%E9%95%BF%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<p>##题目描述</p>
<blockquote>
<p>给你一个字符串 s ，请你返回满足以下条件的最长子字符串的长度：每个元音字母，即 ‘a’，’e’，’i’，’o’，’u’ ，在子字符串中都恰好出现了偶数次.</p>
</blockquote>
<p><a href="https://leetcode-cn.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/" target="_blank" rel="noopener" class="zhihu">每个元音包含偶数次最长子字符串</a></p>
<a id="more"></a>

<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：s &#x3D; &quot;eleetminicoworoep&quot;</span><br><span class="line">输出：13</span><br><span class="line">解释：最长子字符串是 &quot;leetminicowor&quot; ，它包含 e，i，o 各 2 个，以及 0 个 a，u 。</span><br><span class="line"></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">链接：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;find-the-longest-substring-containing-vowels-in-even-counts</span><br><span class="line">著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><div class="note info">
            <ol><li>可以将每个元音出现次数划分为两种状态，如果出现奇数次记为1，出现偶数次记为0，这样一共五个元音，排序共有32中不同方式，这里设第0位为1表示a出现奇数次，依次是e,i,o,u.</li><li>而如果子串[0，i]与字串[0,j]状态相同，那么字串[i+1,j]的状态一定是0，因此可以记录每个状态第一次出现的位置，此后再出现该状态时相减即可。需要注意状态0首次出现的位置应该设定为-1.</li></ol>
          </div>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTheLongestSubstring</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">pre</span><span class="params">(<span class="number">32</span>,INT_MAX)</span></span>;</span><br><span class="line">		<span class="comment">//保存五个原因每个搭配的第一次出现位置</span></span><br><span class="line">		<span class="comment">//初始记为-1</span></span><br><span class="line">        pre[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">int</span> N=s.size();</span><br><span class="line">		<span class="comment">//保存目前的原因索引</span></span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)&#123;</span><br><span class="line">            <span class="keyword">switch</span>(s[i])&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'a'</span>:cur^=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'e'</span>:cur^=<span class="number">2</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'i'</span>:cur^=<span class="number">4</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'o'</span>:cur^=<span class="number">8</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'u'</span>:cur^=<span class="number">16</span>;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pre[cur]==INT_MAX) pre[cur]=i;</span><br><span class="line">            <span class="keyword">else</span> ans=max(ans,i-pre[cur]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>每日一记</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>c++:cin的输入总结</title>
    <url>/2020/05/09/c++%E6%A0%87%E5%87%86%E8%BE%93%E5%85%A5%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p><font color=red>核心内容</font></p>
<ol>
<li>cin的使用</li>
<li>cin.getline()的使用</li>
<li>getline()的使用</li>
</ol>
</blockquote>
<a id="more"></a>

<h2 id="cin的使用"><a href="#cin的使用" class="headerlink" title="cin的使用"></a>cin的使用</h2><ol>
<li>基本用法：接收一个数字或字符</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;a+b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	reurn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>接收字符串(string)，遇到空格，TAB，ENTER结束</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="cin-getline-的使用"><a href="#cin-getline-的使用" class="headerlink" title="cin.getline()的使用"></a>cin.getline()的使用</h2><blockquote>
<p>接收一个字符串，可以接收空格</p>
<p><font color=red>此时接收的应为char[]类型的</font></p>
<p>第一个参数接收的buf，第二个参数时接受的字符串的长度</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> arr[<span class="number">20</span>];</span><br><span class="line">    <span class="built_in">cin</span>.getline(arr,<span class="number">6</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;arr;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/05/09/YlcWxe.png" alt="示例1"></p>
<blockquote>
<p><font color=red>tips:</font></p>
<p>事实上cin.getline()有三个参数，第三个参数表示结束符号</p>
<p>即如果改成cin.getline(arr,6,’1’),控制台输入abs1cd,arr只能接收到abs。</p>
</blockquote>
<h2 id="getline"><a href="#getline" class="headerlink" title="getline()"></a>getline()</h2><blockquote>
<p>接收一个字符串，可以接受空格并输出，需要包含头文件“#include<string>”</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;s;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/05/09/Yl28hV.png" alt="结果.png"></p>
<p>##小提示</p>
<blockquote>
<p>cin.getline()属于istream流，而getline()属于string流，是不同的两个函数<br>如果同时使用cin和getline()需要注意在完成cin之后需要使用两个getline(cin,str)语句来清楚cin的缓冲，否则程序会将第一个cin作为输入流而把第二个cin输入流跳过!</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1,s2;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入你的学号:\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入你的姓名:\n"</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"你好："</span>&lt;&lt;s1&lt;&lt;<span class="string">"--"</span>&lt;&lt;s2&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于程序将第一个cin输入流看作第二个的输入流，所以输入学号完成后，会直接跳过输入姓名的步骤，运行结果如下：</p>
<p><img src="https://s1.ax1x.com/2020/05/09/YlWwJx.png" alt="实例3.png"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入你的学号:\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;s1;</span><br><span class="line">    <span class="built_in">string</span> s2;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"请输入你的姓名:\n"</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>,s2);</span><br><span class="line">    getline(<span class="built_in">cin</span>,s2);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"你好："</span>&lt;&lt;s1&lt;&lt;<span class="string">"--"</span>&lt;&lt;s2&lt;&lt;<span class="string">'\n'</span>;</span><br><span class="line">    system(<span class="string">"pause"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果正常！</p>
]]></content>
      <categories>
        <category>c++基础</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>cin</tag>
      </tags>
  </entry>
  <entry>
    <title>个性化标签页</title>
    <url>/2020/05/15/%E4%B8%AA%E6%80%A7%E5%8C%96%E6%A0%87%E7%AD%BE%E9%A1%B5/</url>
    <content><![CDATA[<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><img src="https://s1.ax1x.com/2020/05/15/YrRITH.png" alt="YrRITH.png"></p>
<a id="more"></a>
<p>##创建HTML文件</p>
<blockquote>
<p>在theme/next/layout/下创建tagcanvas.swig文件</p>
</blockquote>
<p>添加下面的内容</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">     <span class="keyword">var</span> alltags = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'tag-cloud-tags'</span>);</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">var</span> tags = alltags[<span class="number">0</span>].getElementsByTagName(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="actionscript">     <span class="keyword">for</span> (<span class="keyword">var</span> i = tags.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> r=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">130</span>);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> g=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">100</span>);</span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> b=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">75</span>+<span class="number">80</span>);</span></span><br><span class="line"><span class="actionscript">       tags[i].style.background = <span class="string">"rgb("</span>+r+<span class="string">","</span>+g+<span class="string">","</span>+b+<span class="string">")"</span>;</span></span><br><span class="line">     &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.tag-cloud-tags</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/*font-family: Helvetica, Tahoma, Arial;*/</span></span></span><br><span class="line"><span class="css">    <span class="comment">/*font-weight: 100;*/</span></span></span><br><span class="line">    text-align: center;</span><br><span class="line">    counter-reset: tags;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">    border-radius: 6px;</span><br><span class="line">    padding-right: 5px;</span><br><span class="line">    padding-left: 5px;</span><br><span class="line">    margin: 8px 5px 0px 0px;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="css">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line">    content: "🔖";</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">     <span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0,0,0,<span class="selector-class">.4</span>);</span></span><br><span class="line"><span class="css">     <span class="selector-tag">transform</span>: <span class="selector-tag">scale</span>(1<span class="selector-class">.1</span>);</span></span><br><span class="line"><span class="css">     <span class="comment">/*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span></span></span><br><span class="line"><span class="css">     <span class="selector-tag">transition-duration</span>: 0<span class="selector-class">.15s</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>##引入tagcanvas,swig文件</p>
<blockquote>
<p>打开同目录下得page.swig;找到<font color=red>if page.type === ‘tags’ %}</font>这句话，在下一个elif之前添加下面这句话</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% include 'tagcanvas.swig' %&#125;</span><br></pre></td></tr></table></figure>

<p>大功告成!!! hexo s测试即可</p>
]]></content>
      <categories>
        <category>博客美化</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>文章置顶</title>
    <url>/2020/05/15/%E6%96%87%E7%AB%A0%E7%BD%AE%E9%A1%B6/</url>
    <content><![CDATA[<blockquote>
<p>博客默认是按照创建的时间早晚来排序的，随着博客的增多，总有一些重要的博客你希望一眼就能看到，此时，也就需要添加一个博客置顶的功能来满足需求</p>
</blockquote>
<p>##安装插件</p>
<blockquote>
<p>npm install hexo-generator-index-pin-top –save</p>
</blockquote>
<a id="more"></a>
<p>##实现博客排序</p>
<blockquote>
<p>这个插件是实现排序的，</p>
</blockquote>
<p>在头部添加<font color=red>top: num</font>字样即可，其中num是整数，数字越大，博客优先级越高。</p>
<h2 id="实现博客置顶"><a href="#实现博客置顶" class="headerlink" title="实现博客置顶"></a>实现博客置顶</h2><p>有了这个插件，我相信你自己就可以设置博客置顶了，只要有一个博客设置为相对大就行了。<br>这里我主要讲一下优化，添加一个置顶小图标<br><img src="https://s1.ax1x.com/2020/05/15/YyEsGF.png" alt="置顶F.png"></p>
<div class="tabs" id="t_code_3"><ul class="nav-tabs"><li class="tab active"><a href="#t_code_3-1"><font size=2 color='#D56F2B'>设置</font></a></li><li class="tab"><a href="#t_code_3-2"><font size=2 color='#D56F2B'>添加</font></a></li><li class="tab"><a href="#t_code_3-3"><font size=2 color='#D56F2B'>个性化</font></a></li></ul><div class="tab-content"><div class="tab-pane active" id="t_code_3-1"><p><font size=2>索引到themes\next\layout_macro\post.swig文件中的class=”post-meta”</font></p></div><div class="tab-pane" id="t_code_3-2"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加文章置顶图标--&gt;</span></span><br><span class="line">    &#123;% if post.top== 100 %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumbs-up"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"red"</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endif %&#125;</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="t_code_3-3"><p><font size=2 >前面的fa-thumbs-up以及top==100判断条件按自己需求改</font></p></div></div></div>]]></content>
      <categories>
        <category>博客美化</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>个性化链接</title>
    <url>/2020/05/15/%E4%B8%AA%E6%80%A7%E5%8C%96%E9%93%BE%E6%8E%A5/</url>
    <content><![CDATA[<blockquote>
<p>类似于知乎链接<br><a href="http://gbw610.top/2020/05/15/%E4%B8%AA%E6%80%A7%E5%8C%96%E9%93%BE%E6%8E%A5/" class="zhihu">连接展示</a></p>
</blockquote>
<a id="more"></a>

<p>##创建js文件</p>
<blockquote>
<p>在themes\next\source\js下添加zhihu.js文件</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> zhihuCards=<span class="built_in">document</span>.getElementsByClassName(<span class="string">'zhihu'</span>);</span><br><span class="line">  <span class="keyword">if</span>(zhihuCards.length != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> zhihuCard=zhihuCards[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> link=zhihuCard.href;</span><br><span class="line">    <span class="keyword">var</span> title=zhihuCard.innerText;</span><br><span class="line">    zhihuCard.innerHTML=<span class="string">"&lt;style type=text/css&gt;.zhihuCard,.zhihuCard:hover&#123;text-decoration:none;border:none!important;color:inherit!important&#125;.zhihuCard&#123;position:relative;display:block;margin:5px auto;width:330px;box-sizing:border-box;border-radius:12px;max-width:100%;overflow:hidden;color:inherit;text-decoration:none&#125;.ztext&#123;word-break:break-word;line-height:1.6&#125;.zhihuCard-backdrop&#123;position:absolute;top:0;left:0;right:0;bottom:0;background-repeat:no-repeat;-webkit-filter:blur(20px);filter:blur(20px);background-size:cover;background-position:center&#125;.zhihuCard,.zhihuCard:hover&#123;text-decoration:none;border:none!important;color:inherit!important&#125;.zhihuCard-content&#123;position:relative;display:flex;align-items:center;justify-content:space-between;padding:12px;border-radius:inherit;background-color:rgba(246,246,246,0.88)&#125;.zhihuCard-text&#123;overflow:hidden;width:260px;&#125;.zhihuCard-title&#123;white-space: nowrap;display:-webkit-box;-webkit-line-clamp:2;overflow:hidden;text-overflow:ellipsis;max-height:calc(16px * 1.25 * 2);font-size:16px;font-weight:500;line-height:1.25;color:#1a1a1a&#125;@media(max-width: 767px)&#123;.zhihuCard-title&#123;font-size:13px;&#125;&#125;.zhihuCard-meta&#123;display:flex;margin-top:4px;font-size:14px;line-height:20px;color:#999;white-space:nowrap&#125;.zhihuCard-imageCell&#123;margin-left:28px;border-radius:30px;width:70px;&#125;.zhihuCard-image&#123;display:block;width:60px;height:auto;border-radius:inherit&#125;&lt;/style&gt;&lt;span class=zhihuCard-backdrop &gt;&lt;/span&gt;&lt;span class=zhihuCard-content&gt;&lt;span class=zhihuCard-text&gt;&lt;span class=zhihuCard-title&gt;"</span>+title+<span class="string">"&lt;/span&gt;&lt;span class=zhihuCard-meta&gt;&lt;span style=display:inline-flex;align-items:center&gt;&lt;svg class="</span>+<span class="string">"'Zi Zi--InsertLink'"</span>+<span class="string">" fill=currentColor viewBox="</span>+<span class="string">"'0 0 24 24'"</span>+<span class="string">" width=17 height=17&gt;&lt;path d="</span>+<span class="string">"'M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z'"</span>+<span class="string">" fill-rule=evenodd&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;"</span>+link+<span class="string">"&lt;/span&gt;&lt;/span&gt;&lt;span class=zhihuCard-imageCell&gt;&lt;img class=zhihuCard-image alt=logo src=/images/zhihuCard.jpg&gt;&lt;/span&gt;&lt;/span&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = zhihuCards.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">      zhihuCard=zhihuCards[i];</span><br><span class="line">      title=zhihuCard.innerText;</span><br><span class="line">      link=zhihuCard.href;</span><br><span class="line">      zhihuCard.innerHTML=<span class="string">"&lt;span class=zhihuCard-backdrop&gt;&lt;/span&gt;&lt;span class=zhihuCard-content&gt;&lt;span class=zhihuCard-text&gt;&lt;span class=zhihuCard-title&gt;"</span>+title+<span class="string">"&lt;/span&gt;&lt;span class=zhihuCard-meta&gt;&lt;span style=display:inline-flex;align-items:center&gt;&lt;svg class="</span>+<span class="string">"'Zi Zi--InsertLink'"</span>+<span class="string">" fill=currentColor viewBox="</span>+<span class="string">"'0 0 24 24'"</span>+<span class="string">" width=17 height=17&gt;&lt;path d="</span>+<span class="string">"'M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z'"</span>+<span class="string">" fill-rule=evenodd&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;"</span>+link+<span class="string">"&lt;/span&gt;&lt;/span&gt;&lt;span class=zhihuCard-imageCell&gt;&lt;img class=zhihuCard-image alt=图标 src=/images/zhihuCard.jpg&gt;&lt;/span&gt;&lt;/span&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>##引用js文件</p>
<blockquote>
<p>找到themes\next\layout下得_layout.swig文件<br>在body标签结束前添加</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加知乎连接脚本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/zhihu.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<div class="tabs" id="t_code_1"><ul class="nav-tabs"><li class="tab active"><a href="#t_code_1-1"><font size=2 color='#D56F2B'>使用</font></a></li><li class="tab"><a href="#t_code_1-2"><font size=2 color='#D56F2B'>图标修改</font></a></li></ul><div class="tab-content"><div class="tab-pane active" id="t_code_1-1"><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://gbw610.top/tags/"</span> <span class="attr">class</span>=<span class="string">"zhihu"</span>&gt;</span>连接展示<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="t_code_1-2"><p><font size=2 >在代码最后面的image标签处得src=中更改自己的图标</font></p></div></div></div>

<hr>
<p>###更新</p>
<blockquote>
<p>上面的代码会出现一些bug，打开页面时页面内点击任何区域都会触发链接，很容易看出是连接区域过大，通过测试，做了一些修改，修改后的代码如下，可以正常使用</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> zhihuCards=<span class="built_in">document</span>.getElementsByClassName(<span class="string">'zhihu'</span>);</span><br><span class="line">  <span class="keyword">if</span>(zhihuCards.length != <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> zhihuCard=zhihuCards[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> link=zhihuCard.href;</span><br><span class="line">    <span class="keyword">var</span> title=zhihuCard.innerText;</span><br><span class="line">    zhihuCard.innerHTML=<span class="string">"&lt;style type=text/css&gt;.zhihuCard,.zhihuCard:hover&#123;text-decoration:none;border:none!important;color:inherit!important&#125;.zhihuCard&#123;position:relative;display:block;margin:5px auto;width:330px;box-sizing:border-box;border-radius:12px;max-width:100%;overflow:hidden;color:inherit;text-decoration:none&#125;.ztext&#123;word-break:break-word;line-height:1.6&#125;.zhihuCard-backdrop&#123;height:30px;position:absolute;top:30px;left:0;right:0;bottom:0;background-repeat:no-repeat;-webkit-filter:blur(20px);filter:blur(20px);background-size:cover;background-position:center&#125;.zhihuCard,.zhihuCard:hover&#123;text-decoration:none;border:none!important;color:inherit!important&#125;.zhihuCard-content&#123;position:relative;display:flex;align-items:center;justify-content:space-between;padding:12px;border-radius:inherit;background-color:rgba(246,246,246,0.88)&#125;.zhihuCard-text&#123;overflow:hidden;width:260px;&#125;.zhihuCard-title&#123;white-space: nowrap;display:-webkit-box;-webkit-line-clamp:2;overflow:hidden;text-overflow:ellipsis;max-height:calc(16px * 1.25 * 2);font-size:16px;font-weight:500;line-height:1.25;color:#1a1a1a&#125;@media(max-width: 767px)&#123;.zhihuCard-title&#123;font-size:13px;&#125;&#125;.zhihuCard-meta&#123;display:flex;margin-top:4px;font-size:14px;line-height:20px;color:#999;white-space:nowrap&#125;.zhihuCard-imageCell&#123;margin-left:28px;border-radius:30px;width:70px;&#125;.zhihuCard-image&#123;display:block;width:60px;height:auto;border-radius:inherit&#125;&lt;/style&gt;&lt;span class=zhihuCard-backdrop &gt;&lt;/span&gt;&lt;span class=zhihuCard-content&gt;&lt;span class=zhihuCard-text&gt;&lt;span class=zhihuCard-title&gt;"</span>+title+<span class="string">"&lt;/span&gt;&lt;span class=zhihuCard-meta&gt;&lt;span style=display:inline-flex;align-items:center&gt;&lt;svg class="</span>+<span class="string">"'Zi Zi--InsertLink'"</span>+<span class="string">" fill=currentColor viewBox="</span>+<span class="string">"'0 0 24 24'"</span>+<span class="string">" width=17 height=17&gt;&lt;path d="</span>+<span class="string">"'M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z'"</span>+<span class="string">" fill-rule=evenodd&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;"</span>+link+<span class="string">"&lt;/span&gt;&lt;/span&gt;&lt;span class=zhihuCard-imageCell&gt;&lt;img class=zhihuCard-image alt=logo src=/images/zhihuCard.jpg&gt;&lt;/span&gt;&lt;/span&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = zhihuCards.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">      zhihuCard=zhihuCards[i];</span><br><span class="line">      title=zhihuCard.innerText;</span><br><span class="line">      link=zhihuCard.href;</span><br><span class="line">      zhihuCard.innerHTML=<span class="string">"&lt;span class=zhihuCard-backdrop&gt;&lt;/span&gt;&lt;span class=zhihuCard-content&gt;&lt;span class=zhihuCard-text&gt;&lt;span class=zhihuCard-title&gt;"</span>+title+<span class="string">"&lt;/span&gt;&lt;span class=zhihuCard-meta&gt;&lt;span style=display:inline-flex;align-items:center&gt;&lt;svg class="</span>+<span class="string">"'Zi Zi--InsertLink'"</span>+<span class="string">" fill=currentColor viewBox="</span>+<span class="string">"'0 0 24 24'"</span>+<span class="string">" width=17 height=17&gt;&lt;path d="</span>+<span class="string">"'M6.77 17.23c-.905-.904-.94-2.333-.08-3.193l3.059-3.06-1.192-1.19-3.059 3.058c-1.489 1.489-1.427 3.954.138 5.519s4.03 1.627 5.519.138l3.059-3.059-1.192-1.192-3.059 3.06c-.86.86-2.289.824-3.193-.08zm3.016-8.673l1.192 1.192 3.059-3.06c.86-.86 2.289-.824 3.193.08.905.905.94 2.334.08 3.194l-3.059 3.06 1.192 1.19 3.059-3.058c1.489-1.489 1.427-3.954-.138-5.519s-4.03-1.627-5.519-.138L9.786 8.557zm-1.023 6.68c.33.33.863.343 1.177.029l5.34-5.34c.314-.314.3-.846-.03-1.176-.33-.33-.862-.344-1.176-.03l-5.34 5.34c-.314.314-.3.846.03 1.177z'"</span>+<span class="string">" fill-rule=evenodd&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/span&gt;"</span>+link+<span class="string">"&lt;/span&gt;&lt;/span&gt;&lt;span class=zhihuCard-imageCell&gt;&lt;img class=zhihuCard-image alt=图标 src=/images/zhihuCard.jpg&gt;&lt;/span&gt;&lt;/span&gt;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>博客美化</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>喵星人入住</title>
    <url>/2020/05/14/%E5%96%B5%E6%98%9F%E4%BA%BA%E5%85%A5%E4%BD%8F/</url>
    <content><![CDATA[<p>##添加看板娘</p>
<ol>
<li>安装依赖</li>
</ol>
<blockquote>
<p>npm install –save hexo-helper-live2d</p>
</blockquote>
<ol start="2">
<li>配置根目录下的_config.yml</li>
</ol>
<a id="more"></a>

<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<div class="tabs" id="t_code_1"><ul class="nav-tabs"><li class="tab active"><a href="#t_code_1-1">其他模型参考</a></li><li class="tab"><a href="#t_code_1-2">使用</a></li><li class="tab"><a href="#t_code_1-3">卸载</a></li></ul><div class="tab-content"><div class="tab-pane active" id="t_code_1-1"><p><a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">live2d模型</a></p></div><div class="tab-pane" id="t_code_1-2"><p>根据产看的模型包</p>
<blockquote>
<p>npm install 模型包即可</p>
</blockquote></div><div class="tab-pane" id="t_code_1-3"><ol>
<li>npm uninstall hexo-helper-live2d</li>
<li>去掉站点_config.yml下的配置信息</li>
</ol></div></div></div>]]></content>
      <categories>
        <category>博客美化</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建个人博客(终极篇)</title>
    <url>/2020/02/24/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(%E7%BB%88%E6%9E%81%E7%AF%87)/</url>
    <content><![CDATA[<h2 id="修改文章内链文本样式"><a href="#修改文章内链文本样式" class="headerlink" title="修改文章内链文本样式"></a>修改文章内链文本样式</h2><p>实现效果：<br><img src="https://s2.ax1x.com/2020/02/24/3GnB3q.png" alt="3GnB3q.png"><br>打开文件themes\source\css_common\components\post\post.styl,在末尾添加以下css样式：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>可以根据喜好设置颜色，只需更改color即可</p>
          </div>
<p><del>~ ## 实现文章字数统计和阅读时间统计</del><br><del>实现效果：</del><br><del><img src="https://s2.ax1x.com/2020/02/24/38XGIH.png" alt="count.png"></del><br><del>1. 在站点根目录下打开GitBash，安装hexo-wordcount插件：</del></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>

<h2 id="增加版权信息"><a href="#增加版权信息" class="headerlink" title="增加版权信息"></a>增加版权信息</h2><p>实现效果：<br><img src="https://s2.ax1x.com/2020/02/24/38XhLT.png" alt="copyright.png"></p>
<ol>
<li>在next\layout_macro\下新建文件my-copyright.swig:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#123;% if page.copyright %&#125;</span><br><span class="line">&lt;div class&#x3D;&quot;my_post_copyright&quot;&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;clipboard.js&#x2F;1.5.10&#x2F;clipboard.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;jquery&#x2F;2.0.0&#x2F;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;https:&#x2F;&#x2F;unpkg.com&#x2F;sweetalert&#x2F;dist&#x2F;sweetalert.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;本文标题:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot;&gt;&#123;&#123; page.title &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;文章作者:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#x2F;&quot; title&#x3D;&quot;访问 &#123;&#123; theme.author &#125;&#125; 的个人博客&quot;&gt;&#123;&#123; theme.author &#125;&#125;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;发布时间:&lt;&#x2F;span&gt;&#123;&#123; page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;最后更新:&lt;&#x2F;span&gt;&#123;&#123; page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;原始链接:&lt;&#x2F;span&gt;&lt;a href&#x3D;&quot;&#123;&#123; url_for(page.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; page.title &#125;&#125;&quot;&gt;&#123;&#123; page.permalink &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;copy-path&quot;  title&#x3D;&quot;点击复制文章链接&quot;&gt;&lt;i class&#x3D;&quot;fa fa-clipboard&quot; data-clipboard-text&#x3D;&quot;&#123;&#123; page.permalink &#125;&#125;&quot;  aria-label&#x3D;&quot;复制成功！&quot;&gt;&lt;&#x2F;i&gt;&lt;&#x2F;span&gt;</span><br><span class="line">  &lt;&#x2F;p&gt;</span><br><span class="line">  &lt;p&gt;&lt;span&gt;许可协议:&lt;&#x2F;span&gt;&lt;i class&#x3D;&quot;fa fa-creative-commons&quot;&gt;&lt;&#x2F;i&gt; &lt;a rel&#x3D;&quot;license&quot; href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-nd&#x2F;4.0&#x2F;&quot; target&#x3D;&quot;_blank&quot; title&#x3D;&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;&#x2F;a&gt; 转载请保留原文链接及作者。&lt;&#x2F;p&gt;  </span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt; </span><br><span class="line">    var clipboard &#x3D; new Clipboard(&#39;.fa-clipboard&#39;);</span><br><span class="line">      $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">      clipboard.on(&#39;success&#39;, function()&#123;</span><br><span class="line">        swal(&#123;   </span><br><span class="line">          title: &quot;&quot;,   </span><br><span class="line">          text: &#39;复制成功&#39;,</span><br><span class="line">          icon: &quot;success&quot;, </span><br><span class="line">          showConfirmButton: true</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);  </span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li>
<li>在next\source\css_common\components\post\下新建文件my-post-copyright.styl：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.my_post_copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright p&#123;margin:0;&#125;</span><br><span class="line">.my_post_copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.my_post_copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>打开next\layout_macro\post.swig文件，<br><img src="https://s2.ax1x.com/2020/02/24/3GNZRO.png" alt="3GNZRO.png"></li>
<li>打开next\source\css_common\components\post\post.styl,在末尾添加<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@import &quot;my-post-copyright&quot;</span><br></pre></td></tr></table></figure>
版权信息就添加完成了<div class="note info">
            <p>如果想要添加版权信息，需要在文章开头例如hello_world.md开头加上copyright: true才能正常显示。</p>
          </div>

</li>
</ol>
<h2 id="开启文章打赏功能"><a href="#开启文章打赏功能" class="headerlink" title="开启文章打赏功能"></a>开启文章打赏功能</h2><p>实现效果：<br><img src="https://s2.ax1x.com/2020/02/24/38jKYj.png" alt="reward.png"></p>
<ol>
<li>准备好自己的支付宝和微信二维码放在themes\source\images\目录下</li>
<li>打开主题配置文件<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">reward_settings:</span><br><span class="line">  # If true, reward will be displayed in every article by default.</span><br><span class="line">  enable: true</span><br><span class="line">  animation: false</span><br><span class="line">  comment: 亲,留步</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  wechatpay: &#x2F;images&#x2F;wechatpay.png</span><br><span class="line">  alipay: &#x2F;images&#x2F;alipay.jpg</span><br><span class="line">  #bitcoin: &#x2F;images&#x2F;bitcoin.png</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="开启留言评论功能"><a href="#开启留言评论功能" class="headerlink" title="开启留言评论功能"></a>开启留言评论功能</h2><p>实现效果：<br><img src="https://s2.ax1x.com/2020/02/24/38jB11.png" alt="vline.png"></p>
<blockquote>
<p>评论系统有很多，我们选择比较稳定的valine</p>
</blockquote>
<ol>
<li><p>注册<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud</a></p>
</li>
<li><p>注册完成后创建一个应用，名字可以随便起，然后进入：应用-&gt;设置-&gt;应用key，来获取appid和appkey</p>
</li>
<li><p>打开主题配置文件，搜索valine，填入appid和appkey<br><img src="https://s2.ax1x.com/2020/02/24/3Gdhwj.png" alt="valine.png"></p>
</li>
<li><p>在Leancloud -&gt;设置-&gt;安全中心-&gt;Web安全域名，把你的域名加上去。</p>
<h2 id="设置博客背景图片"><a href="#设置博客背景图片" class="headerlink" title="设置博客背景图片"></a>设置博客背景图片</h2><div class="note info">
            <p>由于新版本css文件夹下没有_custom文件夹，网上的很多教程都不能用，这里介绍一种新方法。</p>
          </div></li>
<li><p>在根目录的source下新建_data/styles.sytl</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line"> 	background:url(&#x2F;images&#x2F;background.jpg);</span><br><span class="line"> 	background-repeat: no-repeat;</span><br><span class="line">    background-attachment:fixed;</span><br><span class="line">    background-position:50% 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在主题配置文件将对应注释取消</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.swig</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.swig</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.swig</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.swig</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.swig</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.swig</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>
<p>重新clean g s一下即可看到效果</p>
</li>
</ol>
<h2 id="增加阅读排行"><a href="#增加阅读排行" class="headerlink" title="增加阅读排行"></a>增加阅读排行</h2><div class="note info">
            <p>阅读排行页面是基于leancloud的统计数据来实现的，所以在此之前请确保已经注册leancloud，还没有注册的前面章节有介绍！</p>
          </div>
<ol>
<li>新建页面<br>执行hexo new page top；会生成top目录，编辑目录下的index.md文件，将以下代码复制：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;top&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn1.lncld.net&#x2F;static&#x2F;js&#x2F;av-core-mini-0.6.4.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;AV.initialize(&quot;leancloud_appid&quot;, &quot;leancloud_appkey&quot;);&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">  var time&#x3D;0</span><br><span class="line">  var title&#x3D;&quot;&quot;</span><br><span class="line">  var url&#x3D;&quot;&quot;</span><br><span class="line">  var query &#x3D; new AV.Query(&#39;Counter&#39;);</span><br><span class="line">  query.notEqualTo(&#39;id&#39;,0);</span><br><span class="line">  query.descending(&#39;time&#39;);</span><br><span class="line">  query.limit(1000);</span><br><span class="line">  query.find().then(function (todo) &#123;</span><br><span class="line">    for (var i&#x3D;0;i&lt;1000;i++)&#123;</span><br><span class="line">      var result&#x3D;todo[i].attributes;</span><br><span class="line">      time&#x3D;result.time;</span><br><span class="line">      title&#x3D;result.title;</span><br><span class="line">      url&#x3D;result.url;</span><br><span class="line">      var content&#x3D;&quot;&lt;p&gt;&quot;+&quot;&lt;font color&#x3D;&#39;#1C1C1C&#39;&gt;&quot;+&quot;【文章热度:&quot;+time+&quot;℃】&quot;+&quot;&lt;&#x2F;font&gt;&quot;+&quot;&lt;a href&#x3D;&#39;&quot;+&quot;https:&#x2F;&#x2F;tding.top&quot;+url+&quot;&#39;&gt;&quot;+title+&quot;&lt;&#x2F;a&gt;&quot;+&quot;&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">      document.getElementById(&quot;top&quot;).innerHTML+&#x3D;content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, function (error) &#123;</span><br><span class="line">    console.log(&quot;error&quot;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其中的leancloud_appid,leancloud_appkey换成自己的即可。</p>
</blockquote>
</li>
</ol>
<h2 id="增加文章评分功能"><a href="#增加文章评分功能" class="headerlink" title="增加文章评分功能"></a>增加文章评分功能</h2><p>在主题配置文件中修改以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rating:</span><br><span class="line">  enable: true</span><br><span class="line">  id:       #你的id</span><br><span class="line">  color:  fc6423</span><br></pre></td></tr></table></figure>
<div class="note info">
            <p>获取id方法：</p><ol><li>打开<a href="https://widgetpack.com/" target="_blank" rel="noopener">widgetpack</a>,注册账号</li><li>注册完成后左上角有个ID，填入即可</li><li>配置评分方式：侧栏-&gt;Rating-&gt;Setting，推荐IP address</li><li>建议侧栏-&gt;site-&gt;setting 中勾选Private选项</li></ol>
          </div>


<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><ol>
<li>使用邮箱注册<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>,完成邮箱验证</li>
<li>设置用户名和邮箱<br>进入Git Bash,依次输入下面的代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub 用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub 邮箱&quot;</span><br></pre></td></tr></table></figure></li>
<li>创建SSH密匙：<blockquote>
<p>输入 <font color=red>ssh-keygen -t rsa -C “GitHub 邮箱”</font>，然后一路回车。</p>
</blockquote>
</li>
<li>添加密匙<br>进入 [C:\Users\用户名.ssh] 目录，用notepad++打开公钥 id_rsa.pub 文件并复制里面的内容。<br>登陆 GitHub ，点击右上角自己的头像，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。<br>具体流程如下<br><img src="https://s2.ax1x.com/2020/02/25/3YKWXq.png" alt="setting.png"><br><img src="https://s2.ax1x.com/2020/02/25/3YKLcR.png" alt="3YKLcR.png"><br><img src="https://s2.ax1x.com/2020/02/25/3YMP9H.png" alt="3YMP9H.png"></li>
<li>验证配置<br>配置成功后进入Git Bash，输入ssh -T <a href="mailto:git@github.com">git@github.com</a>，出现 “Are you sure……”，输入 yes 回车确认。成功样例如下<br><img src="https://s2.ax1x.com/2020/02/25/3YMsDx.png" alt="3YMsDx.png"></li>
<li>创建Github Pages仓库<br>点击左上角“new”<br><img src="https://s2.ax1x.com/2020/02/25/3YIDNn.png" alt="3YIDNn.png"><br>仓库名输入你的github用户名.github.io<br><img src="https://s2.ax1x.com/2020/02/25/3YTPiR.png" alt="3YTPiR.png"><br>查看你的博客网址<br><img src="https://s2.ax1x.com/2020/02/25/3YTgw4.png" alt="3YTgw4.png"><br><img src="https://s2.ax1x.com/2020/02/25/3YTHmD.png" alt="3YTHmD.png"><blockquote>
<p>由于你的博客还没有部署到github上，所以上面的网止点开后什么都没有，接下来我们就开始部署吧！</p>
</blockquote>
</li>
<li>部署<br>首先安装hexo-deployer-git<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
然后修改站点配置文件_config.yml,在末尾处如下修改<br><img src="https://s2.ax1x.com/2020/02/25/3Y7XbF.png" alt="3Y7XbF.png"><br>完成后运行 <font color=red>hexo d </font>将网站上传部署到 GitHub Pages。这时访问我们的 GitHub 域名 https://用户名.github.io 就可以看到 Hexo 网站了。</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建个人博客(进阶篇)</title>
    <url>/2020/02/24/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(%E8%BF%9B%E9%98%B6%E7%AF%87)/</url>
    <content><![CDATA[<blockquote>
<p>经过基础篇的热身，我们将正式进入自制个性博客站点环节，一起打造属于自己独特的博客吧！</p>
</blockquote>
<blockquote>
<p><font color=red>特别提示:</font></p>
<blockquote>
<ul>
<li>站点文件是在站点目录下，即在你创建的博客文件夹下</li>
<li>主题配置文件在themes/next/下</li>
</ul>
</blockquote>
</blockquote>
<h2 id="配置博客基本信息"><a href="#配置博客基本信息" class="headerlink" title="配置博客基本信息"></a>配置博客基本信息</h2><a id="more"></a>
<blockquote>
<p>在站点目录下打开<font color=red>_config.yml</font>配置基本信息</p>
</blockquote>
<blockquote>
<p>推荐一个超级好用的文本编辑器<font color=red>Notepad++</font></p>
</blockquote>
<p><img src="https://s2.ax1x.com/2020/02/24/33Odeg.png" alt="setting.png"><br>对部分对应的效果进行展示如下：<br><img src="https://s2.ax1x.com/2020/02/24/33XP6f.png" alt="show.png"></p>
<blockquote>
<p>也许你的界面和我的不一样，不要着急，马上你的就会变得beautiful！</p>
</blockquote>
<h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><blockquote>
<p>hexo默认的主题实在是太low了，接下来我们就配置一个个性化的主题来养养眼！</p>
</blockquote>
<h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><blockquote>
<p>(如果嫌弃麻烦可以直接食用方法2，方法2异常时再食用方法1即可)</p>
</blockquote>
<p>博客主题有很多，你可以根据自己需要选取<a href="https://hexo.io/themes/" target="_blank" rel="noopener">点我</a>,可以跟着博主选择next主题，网上的资料较多，出问题时容易解决</p>
<h4 id="进入网站后进行如下操作"><a href="#进入网站后进行如下操作" class="headerlink" title="进入网站后进行如下操作"></a>进入网站后进行如下操作</h4><p><img src="https://s2.ax1x.com/2020/02/24/33vpsf.png" alt="search.png"></p>
<h4 id="点击进入"><a href="#点击进入" class="headerlink" title="点击进入"></a>点击进入</h4><p><img src="https://s2.ax1x.com/2020/02/24/33vofs.png" alt="7.7.1.png"></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><img src="https://s2.ax1x.com/2020/02/24/33x4u6.png" alt="window.png"></p>
<h4 id="将下载的文件解压到博客站点文件夹-themes下，并命名为next"><a href="#将下载的文件解压到博客站点文件夹-themes下，并命名为next" class="headerlink" title="将下载的文件解压到博客站点文件夹\themes下，并命名为next"></a>将下载的文件解压到博客站点文件夹\themes下，并命名为<font color=red>next</font></h4><p><img src="https://s2.ax1x.com/2020/02/24/33zuaF.png" alt="33zuaF.png"></p>
<h4 id="注意，一般解压之后文件会嵌套几个文件，这里next目录下应为下图所示，如果不是，把下图所示的所有文件剪贴到next目录下即可"><a href="#注意，一般解压之后文件会嵌套几个文件，这里next目录下应为下图所示，如果不是，把下图所示的所有文件剪贴到next目录下即可" class="headerlink" title="注意，一般解压之后文件会嵌套几个文件，这里next目录下应为下图所示，如果不是，把下图所示的所有文件剪贴到next目录下即可"></a>注意，一般解压之后文件会嵌套几个文件，这里next目录下应为下图所示，如果不是，把下图所示的所有文件剪贴到next目录下即可</h4><p><img src="https://s2.ax1x.com/2020/02/24/38SmQI.png" alt="sample.png"></p>
<h3 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h3><p>在自己站点根目录下打开git bash(我这里时Hexo文件夹下)，输入下面的命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>
<p>成功之后同样在themes目录下有next主题文件夹了！</p>
<h2 id="演示next"><a href="#演示next" class="headerlink" title="演示next"></a>演示next</h2><blockquote>
<p>我们下载的主题到底什么样呢？接下来我们就来配置</p>
</blockquote>
<p>打开<font color = red>站点配置文件</font>_config.yml进行以下设置：<br>Ctrl+F查找theme，将<font color = red>theme:landscape</font>修改为<font color = red>theme:next</font><br><img src="https://s2.ax1x.com/2020/02/24/3896qx.png" alt="theme.png"><br>然后<font color = red>hexo g</font>再<font color = red>hexo s</font>即可看到next主题。</p>
<blockquote>
<p>我肯定你看到的并不是你想看到的，还是太丑了对不对？没关系，下面我们就来优化它！</p>
</blockquote>
<h2 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h2><blockquote>
<p>到目前为止，所有的基本博客配置已经完成，下面就会进行各种骚操作来完成个性主题的优化！</p>
</blockquote>
<h3 id="设置头像，并带有旋转效果"><a href="#设置头像，并带有旋转效果" class="headerlink" title="设置头像，并带有旋转效果"></a>设置头像，并带有旋转效果</h3><p>打开themes/next/_config.yml,Ctrl+F查找avatar<br>如下图所示：<br><img src="https://s2.ax1x.com/2020/02/24/38F6pD.png" alt="avatar.png"><br>其中<font color = red>images</font>文件夹在themes/next/source/images，将自己的头像放在此目录下即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;以后每次修改之后刷新即可看到效果</span><br><span class="line">&#x2F;&#x2F;如果不行执行下面指令</span><br><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<h3 id="设置个人社交图标链接"><a href="#设置个人社交图标链接" class="headerlink" title="设置个人社交图标链接"></a>设置个人社交图标链接</h3><p>实现结果如图<br><img src="https://s2.ax1x.com/2020/02/24/38Aqwn.png" alt="sample.png"><br>打开themes\next_config.yml,找到social，根据自己需要添加即可(其中||后面是图标)<br><img src="https://s2.ax1x.com/2020/02/24/38V1u4.png" alt="social.png"></p>
<div class="note info">
            <p>name是你的图标名字，你可以去<a href="https://www.bootcss.com/p/font-awesome/#" target="_blank" rel="noopener">Font Awesome</a>挑选你喜欢的图标复制名字即可，如icon-laptop,只需要将name更改为laptop，next中已经提前集成了，如果没有，便会用问号代替</p>
          </div>


<h3 id="设置炫酷动态背景"><a href="#设置炫酷动态背景" class="headerlink" title="设置炫酷动态背景"></a>设置炫酷动态背景</h3><p>实现效果：</p>
<p><img src="https://s2.ax1x.com/2020/02/24/38ZnZd.png" alt="action.png"></p>
<p>打开<font color=red>next/layout/_layout.swig</font>复制下面代码粘贴到<font color=red>&#60;/body&#62;</font>前面即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &#123;% if theme.canvas_nest %&#125;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;canvas-nest.js&#x2F;1.0.0&#x2F;canvas-nest.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<p>然后打开主题配置文件_config.yml,找到canvas_nest,修改如下：<br><img src="https://s2.ax1x.com/2020/02/24/38UrL9.png" alt="canvas.png"></p>
<h3 id="设置主题语言"><a href="#设置主题语言" class="headerlink" title="设置主题语言"></a>设置主题语言</h3><p>next主题默认是英文名，如果你需要改成中文的只需要在站点配置文件中(<font color=red>注意不是主题配置文件</font>)设置language:zh-CN,然后需要hexo clean一下，再运行，否则看不到效果</p>
<div class="note info">
            <p>凡是修改站点配置文件，都要执行 hexo clean 之后再运行才能看到效果哦！<br>英文名对应的中文在next\language\zh-CN.yml文件下看到，可以按需修改名字和添加新的标签，后面有需求再介绍！</p>
          </div>
<h3 id="设置网站logo"><a href="#设置网站logo" class="headerlink" title="设置网站logo"></a>设置网站logo</h3><p>实现效果：</p>
<p><img src="https://s2.ax1x.com/2020/02/24/38aL7R.png" alt="logo.png"><br>打开主题配置文件_config.yml，找到字段favicon:;<br><a href="https://imgchr.com/i/38dG40" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/02/24/38dG40.png" alt="38dG40.png"></a></p>
<blockquote>
<p>图标可以在<a href="https://www.iconfont.cn/collections/detail?cid=6502" target="_blank" rel="noopener">iconfont</a>下找自己喜欢的下载到themes\source\images文件夹下，进行大小的调整即可。</p>
</blockquote>
<h3 id="博客底部显示优化"><a href="#博客底部显示优化" class="headerlink" title="博客底部显示优化"></a>博客底部显示优化</h3><h4 id="隐藏底部powered-By-Hexo-强力驱动"><a href="#隐藏底部powered-By-Hexo-强力驱动" class="headerlink" title="隐藏底部powered By Hexo/强力驱动"></a>隐藏底部powered By Hexo/强力驱动</h4><p>打开主题配置文件，搜索footer:,进行以下设置<br><img src="https://s2.ax1x.com/2020/02/24/380J6U.png" alt="footer.png"></p>
<h4 id="添加访问量和浏览量统计"><a href="#添加访问量和浏览量统计" class="headerlink" title="添加访问量和浏览量统计"></a>添加访问量和浏览量统计</h4><p>实现效果：<br><img src="https://s2.ax1x.com/2020/02/24/38BwDg.png" alt="count.png"></p>
<ol>
<li>由于next已经内置了统计，所以一般在主题配置文件中搜索busuanzi_count:进行以下修改即可实现<br><img src="https://s2.ax1x.com/2020/02/24/38BIa9.png" alt="busuanzi.png"></li>
<li>上面的方法如果没有效果，可以采用下面的方法<br>在主题配置文件中查找footer:,<font color=red>添加</font>counter：true<br><img src="https://s2.ax1x.com/2020/02/24/38rBhn.png" alt="counter.png"><br>然后在themes\next\layout_partials\footer.swig文件，在- next_inject(‘footer’)(一般在最底处) 前添加下面代码</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;span&gt;</span><br><span class="line">		&lt;span &gt;访问量:&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次&lt;&#x2F;span&gt;</span><br><span class="line">		&lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|</span><br><span class="line">		&lt;&#x2F;span&gt;</span><br><span class="line">		&lt;span &gt;访客数:&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人&lt;&#x2F;span&gt;</span><br><span class="line">	&lt;&#x2F;div&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="增加鼠标点击特效"><a href="#增加鼠标点击特效" class="headerlink" title="增加鼠标点击特效"></a>增加鼠标点击特效</h3><p>效果展示</p>
<p><img src="https://s2.ax1x.com/2020/02/24/38cS3R.png" alt="effect1.png" title="text"><br><img src="https://s2.ax1x.com/2020/02/24/38Rjqx.png" alt="effect2.png" title="礼花绽放"><br><img src="https://s2.ax1x.com/2020/02/24/38WuFS.png" alt="effect3.png" title="爆炸"><br><img src="https://s2.ax1x.com/2020/02/24/38W0SJ.png" alt="effect4.png" title="爱心"></p>
<p>一共四种效果，可以任意选择，下面一起实现把！</p>
<ol>
<li>创建文件<br>在themes\next\source\js\目录下创建cursor文件夹，在文件夹下新建四个js文件</li>
</ol>
<p>text.js内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var a_idx &#x3D; 0;</span><br><span class="line">jQuery(document).ready(function($) &#123;</span><br><span class="line">  $(&quot;body&quot;).click(function(e) &#123;</span><br><span class="line">    var a &#x3D; new Array(&quot;喜欢我&quot;, &quot;不喜欢我&quot;);</span><br><span class="line">    var $i &#x3D; $(&quot;&lt;span&#x2F;&gt;&quot;).text(a[a_idx]);</span><br><span class="line">    var x &#x3D; e.pageX,</span><br><span class="line">    y &#x3D; e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      &quot;z-index&quot;: 99999,</span><br><span class="line">      &quot;top&quot;: y - 28,</span><br><span class="line">      &quot;left&quot;: x - a[a_idx].length * 8,</span><br><span class="line">      &quot;position&quot;: &quot;absolute&quot;,</span><br><span class="line">      &quot;color&quot;: &quot;#ff7a45&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">    $(&quot;body&quot;).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      &quot;top&quot;: y - 180,</span><br><span class="line">      &quot;opacity&quot;: 0</span><br><span class="line">    &#125;, 1500, function() &#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx &#x3D; (a_idx + 1) % a.length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>love.min.js内容如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &#39;&#39;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e&#x3D;0;e&lt;d.length;e++)d[e].alpha&lt;&#x3D;0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+&#x3D;.004,d[e].alpha-&#x3D;.013,d[e].el.style.cssText&#x3D;&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t&#x3D;&quot;function&quot;&#x3D;&#x3D;typeof e.onclick&amp;&amp;e.onclick;e.onclick&#x3D;function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a&#x3D;t.createElement(&quot;div&quot;);a.className&#x3D;&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a&#x3D;t.createElement(&quot;style&quot;);a.type&#x3D;&quot;text&#x2F;css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText&#x3D;e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d&#x3D;[];e.requestAnimationFrame&#x3D;function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3&#x2F;60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure>
<p>firework.js内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Circle &#123;</span><br><span class="line">  constructor(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class="line">    this.origin &#x3D; origin</span><br><span class="line">    this.position &#x3D; &#123; ...this.origin &#125;</span><br><span class="line">    this.color &#x3D; color</span><br><span class="line">    this.speed &#x3D; speed</span><br><span class="line">    this.angle &#x3D; angle</span><br><span class="line">    this.context &#x3D; context</span><br><span class="line">    this.renderCount &#x3D; 0</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.context.fillStyle &#x3D; this.color</span><br><span class="line">    this.context.beginPath()</span><br><span class="line">    this.context.arc(this.position.x, this.position.y, 2, 0, Math.PI * 2)</span><br><span class="line">    this.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.position.x &#x3D; (Math.sin(this.angle) * this.speed) + this.position.x</span><br><span class="line">    this.position.y &#x3D; (Math.cos(this.angle) * this.speed) + this.position.y + (this.renderCount * 0.3)</span><br><span class="line">    this.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Boom &#123;</span><br><span class="line">  constructor (&#123; origin, context, circleCount &#x3D; 16, area &#125;) &#123;</span><br><span class="line">    this.origin &#x3D; origin</span><br><span class="line">    this.context &#x3D; context</span><br><span class="line">    this.circleCount &#x3D; circleCount</span><br><span class="line">    this.area &#x3D; area</span><br><span class="line">    this.stop &#x3D; false</span><br><span class="line">    this.circles &#x3D; []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomArray(range) &#123;</span><br><span class="line">    const length &#x3D; range.length</span><br><span class="line">    const randomIndex &#x3D; Math.floor(length * Math.random())</span><br><span class="line">    return range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomColor() &#123;</span><br><span class="line">    const range &#x3D; [&#39;8&#39;, &#39;9&#39;, &#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;, &#39;F&#39;]</span><br><span class="line">    return &#39;#&#39; + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range) + this.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomRange(start, end) &#123;</span><br><span class="line">    return (end - start) * Math.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    for(let i &#x3D; 0; i &lt; this.circleCount; i++) &#123;</span><br><span class="line">      const circle &#x3D; new Circle(&#123;</span><br><span class="line">        context: this.context,</span><br><span class="line">        origin: this.origin,</span><br><span class="line">        color: this.randomColor(),</span><br><span class="line">        angle: this.randomRange(Math.PI - 1, Math.PI + 1),</span><br><span class="line">        speed: this.randomRange(1, 6)</span><br><span class="line">      &#125;)</span><br><span class="line">      this.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    this.circles.forEach((circle, index) &#x3D;&gt; &#123;</span><br><span class="line">      if (circle.position.x &gt; this.area.width || circle.position.y &gt; this.area.height) &#123;</span><br><span class="line">        return this.circles.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    if (this.circles.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">      this.stop &#x3D; true</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    this.circles.forEach(circle &#x3D;&gt; circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CursorSpecialEffects &#123;</span><br><span class="line">  constructor() &#123;</span><br><span class="line">   this.computerCanvas &#x3D; document.createElement(&#39;canvas&#39;)</span><br><span class="line">    this.renderCanvas &#x3D; document.createElement(&#39;canvas&#39;)</span><br><span class="line"></span><br><span class="line">   this.computerContext &#x3D; this.computerCanvas.getContext(&#39;2d&#39;)</span><br><span class="line">    this.renderContext &#x3D; this.renderCanvas.getContext(&#39;2d&#39;)</span><br><span class="line"></span><br><span class="line">   this.globalWidth &#x3D; window.innerWidth</span><br><span class="line">    this.globalHeight &#x3D; window.innerHeight</span><br><span class="line"></span><br><span class="line">   this.booms &#x3D; []</span><br><span class="line">    this.running &#x3D; false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    const boom &#x3D; new Boom(&#123;</span><br><span class="line">      origin: &#123; x: e.clientX, y: e.clientY &#125;,</span><br><span class="line">      context: this.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: this.globalWidth,</span><br><span class="line">        height: this.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    this.booms.push(boom)</span><br><span class="line">    this.running || this.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePageHide() &#123;</span><br><span class="line">    this.booms &#x3D; []</span><br><span class="line">    this.running &#x3D; false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    const style &#x3D; this.renderCanvas.style</span><br><span class="line">    style.position &#x3D; &#39;fixed&#39;</span><br><span class="line">    style.top &#x3D; style.left &#x3D; 0</span><br><span class="line">    style.zIndex &#x3D; &#39;999999999999999999999999999999999999999999&#39;</span><br><span class="line">    style.pointerEvents &#x3D; &#39;none&#39;</span><br><span class="line"></span><br><span class="line">   style.width &#x3D; this.renderCanvas.width &#x3D; this.computerCanvas.width &#x3D; this.globalWidth</span><br><span class="line">    style.height &#x3D; this.renderCanvas.height &#x3D; this.computerCanvas.height &#x3D; this.globalHeight</span><br><span class="line"></span><br><span class="line">   document.body.append(this.renderCanvas)</span><br><span class="line"></span><br><span class="line">   window.addEventListener(&#39;mousedown&#39;, this.handleMouseDown.bind(this))</span><br><span class="line">   window.addEventListener(&#39;pagehide&#39;, this.handlePageHide.bind(this))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    this.running &#x3D; true</span><br><span class="line">    if (this.booms.length &#x3D;&#x3D; 0) &#123;</span><br><span class="line">      return this.running &#x3D; false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   requestAnimationFrame(this.run.bind(this))</span><br><span class="line"></span><br><span class="line">   this.computerContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">   this.renderContext.clearRect(0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line"></span><br><span class="line">   this.booms.forEach((boom, index) &#x3D;&gt; &#123;</span><br><span class="line">      if (boom.stop) &#123;</span><br><span class="line">        return this.booms.splice(index, 1)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    this.renderContext.drawImage(this.computerCanvas, 0, 0, this.globalWidth, this.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const cursorSpecialEffects &#x3D; new CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>
<p>explosion.min.js内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;;function updateCoords(e)&#123;pointerX&#x3D;(e.clientX||e.touches[0].clientX)-canvasEl.getBoundingClientRect().left,pointerY&#x3D;e.clientY||e.touches[0].clientY-canvasEl.getBoundingClientRect().top&#125;function setParticuleDirection(e)&#123;var t&#x3D;anime.random(0,360)*Math.PI&#x2F;180,a&#x3D;anime.random(50,180),n&#x3D;[-1,1][anime.random(0,1)]*a;return&#123;x:e.x+n*Math.cos(t),y:e.y+n*Math.sin(t)&#125;&#125;function createParticule(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;colors[anime.random(0,colors.length-1)],a.radius&#x3D;anime.random(16,32),a.endPos&#x3D;setParticuleDirection(a),a.draw&#x3D;function()&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.fillStyle&#x3D;a.color,ctx.fill()&#125;,a&#125;function createCircle(e,t)&#123;var a&#x3D;&#123;&#125;;return a.x&#x3D;e,a.y&#x3D;t,a.color&#x3D;&quot;#F00&quot;,a.radius&#x3D;.1,a.alpha&#x3D;.5,a.lineWidth&#x3D;6,a.draw&#x3D;function()&#123;ctx.globalAlpha&#x3D;a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,0,2*Math.PI,!0),ctx.lineWidth&#x3D;a.lineWidth,ctx.strokeStyle&#x3D;a.color,ctx.stroke(),ctx.globalAlpha&#x3D;1&#125;,a&#125;function renderParticule(e)&#123;for(var t&#x3D;0;t&lt;e.animatables.length;t++)e.animatables[t].target.draw()&#125;function animateParticules(e,t)&#123;for(var a&#x3D;createCircle(e,t),n&#x3D;[],i&#x3D;0;i&lt;numberOfParticules;i++)n.push(createParticule(e,t));anime.timeline().add(&#123;targets:n,x:function(e)&#123;return e.endPos.x&#125;,y:function(e)&#123;return e.endPos.y&#125;,radius:.1,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule&#125;).add(&#123;targets:a,radius:anime.random(80,160),lineWidth:0,alpha:&#123;value:0,easing:&quot;linear&quot;,duration:anime.random(600,800)&#125;,duration:anime.random(1200,1800),easing:&quot;easeOutExpo&quot;,update:renderParticule,offset:0&#125;)&#125;function debounce(e,t)&#123;var a;return function()&#123;var n&#x3D;this,i&#x3D;arguments;clearTimeout(a),a&#x3D;setTimeout(function()&#123;e.apply(n,i)&#125;,t)&#125;&#125;var canvasEl&#x3D;document.querySelector(&quot;.fireworks&quot;);if(canvasEl)&#123;var ctx&#x3D;canvasEl.getContext(&quot;2d&quot;),numberOfParticules&#x3D;30,pointerX&#x3D;0,pointerY&#x3D;0,tap&#x3D;&quot;mousedown&quot;,colors&#x3D;[&quot;#FF1461&quot;,&quot;#18FF92&quot;,&quot;#5A87FF&quot;,&quot;#FBF38C&quot;],setCanvasSize&#x3D;debounce(function()&#123;canvasEl.width&#x3D;2*window.innerWidth,canvasEl.height&#x3D;2*window.innerHeight,canvasEl.style.width&#x3D;window.innerWidth+&quot;px&quot;,canvasEl.style.height&#x3D;window.innerHeight+&quot;px&quot;,canvasEl.getContext(&quot;2d&quot;).scale(2,2)&#125;,500),render&#x3D;anime(&#123;duration:1&#x2F;0,update:function()&#123;ctx.clearRect(0,0,canvasEl.width,canvasEl.height)&#125;&#125;);document.addEventListener(tap,function(e)&#123;&quot;sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;toggle-sidebar&quot;!&#x3D;&#x3D;e.target.id&amp;&amp;&quot;A&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;&quot;IMG&quot;!&#x3D;&#x3D;e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!1),setCanvasSize(),window.addEventListener(&quot;resize&quot;,setCanvasSize,!1)&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>然后在themes\next\layout\目录下创建_custom\custom.swig文件，将下面的代码添加进去<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;# 鼠标点击特效 #&#125;</span><br><span class="line">&#123;% if theme.cursor_effect &#x3D;&#x3D; &quot;firework&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;firework.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;explosion&quot; %&#125;</span><br><span class="line">  &lt;canvas class&#x3D;&quot;fireworks&quot; style&#x3D;&quot;position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;&quot; &gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">  &lt;script src&#x3D;&quot;&#x2F;&#x2F;cdn.bootcss.com&#x2F;animejs&#x2F;2.2.0&#x2F;anime.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;explosion.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;love&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;love.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% elseif theme.cursor_effect &#x3D;&#x3D; &quot;text&quot; %&#125;</span><br><span class="line">  &lt;script async src&#x3D;&quot;&#x2F;js&#x2F;cursor&#x2F;text.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></li>
<li>最后在\layout_layout.swig文件&#60;/body&#62;前面加入下面代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &#39;_custom&#x2F;custom.swig&#39; %&#125;</span><br></pre></td></tr></table></figure></li>
<li>在主题配置文件最后添加下面内容，刷新即可看到效果<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#鼠标点击特效</span><br><span class="line">cursor_effect: love#效果自己选[填入上面创建的js文件的文件名即可]</span><br></pre></td></tr></table></figure>
<h3 id="在文章末尾增加“本文结束”标记"><a href="#在文章末尾增加“本文结束”标记" class="headerlink" title="在文章末尾增加“本文结束”标记"></a>在文章末尾增加“本文结束”标记</h3>效果如下：<br><img src="https://s2.ax1x.com/2020/02/24/38Hym4.png" alt="end.png"></li>
<li>在themes\next\layout_macro下创建passage-end-tag.swig文件，并粘贴以下代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &#123;% if not is_index %&#125;</span><br><span class="line">        &lt;div style&#x3D;&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class&#x3D;&quot;fa fa-heart&quot;&gt;&lt;&#x2F;i&gt;感谢阅读-------------&lt;&#x2F;div&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>
<li>在该目录下的post.swig文件中下面位置添加代码<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   &#123;#####################&#125;</span><br><span class="line">   &#123;### END POST BODY ###&#125;</span><br><span class="line">   &#123;#####################&#125;</span><br><span class="line">&lt;!--文章末尾添加结束表示--&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;% if not is_index %&#125;</span><br><span class="line">	&#123;% include &#39;passage-end-tag.swig&#39; %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure></li>
<li>打开主题配置文件，在末尾添加以下字段，完成操作<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#文章末尾添加“本文结束”标记</span><br><span class="line">passage_end_tag:</span><br><span class="line">  enabled: true</span><br></pre></td></tr></table></figure>
进阶篇到此结束，点击终极篇来完成博客的终极美化把！</li>
</ol>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo搭建个人博客(入门篇)</title>
    <url>/2020/02/23/hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2(%E5%85%A5%E9%97%A8%E7%AF%87)/</url>
    <content><![CDATA[<h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;安装Hexo是非常简单的，但是在安装之前需要安装一些东西准备:</p>
<ol>
<li><p><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></p>
</li>
<li><p><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></p>
<a id="more"></a>

</li>
</ol>
<p>&nbsp;自己选择安装最新版本即可，下载完成之后，默认安装即可，安装完成之后，鼠标右键会出现<br><em>Git Bash Here,Git GUI Here</em>成功显示便可以开始走入正题：安装Hexo<br>&nbsp;&nbsp;&nbsp;&nbsp;1. 首先，在合适的目录下创建一个文件夹，例如E:\Hexo，创建好之后右击选择<br>Git Bash Here输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>此时，我们便完成了Hexo的安装</p>
<h2 id="初始化博客站点根目录文件"><a href="#初始化博客站点根目录文件" class="headerlink" title="初始化博客站点根目录文件"></a>初始化博客站点根目录文件</h2><p>在上面创建的目录中打开Git Bash继续执行下面的指令(<font color=red>一定要在刚刚创建的文件夹中执行</font>)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>如果顺利，会在文件夹中看到下图所示<br><img src="https://s2.ax1x.com/2020/02/23/31oGyd.png" alt="success.png" title="成功初始化"></p>
<h2 id="查看自己的博客"><a href="#查看自己的博客" class="headerlink" title="查看自己的博客"></a>查看自己的博客</h2><p>至此，基本的博客已经搭建完成，在命令行中键入以下命令来查看自己的博客</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>此时会有如下图所示提示<br><img src="https://s2.ax1x.com/2020/02/23/317Td1.png" alt="hexo_s.png"><br>然后在浏览器中输入<font size=2 color=red>localhost:4000</font>,查看your blog<br>你会看到类似于下图所示的页面<br><img src="https://s2.ax1x.com/2020/02/23/31HdFx.png" alt="blog.png"><br>至此，自己搭建的博客站点基本工作已经完成，但你是否和我有同样的感觉：这个界面好low啊，没错，确实是这样，接下来我们便会进入博客主题的更改以及优化，让我们开始吧！</p>
]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
